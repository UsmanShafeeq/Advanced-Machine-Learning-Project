{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2047221,"sourceType":"datasetVersion","datasetId":1226038}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-31T01:00:47.334573Z","iopub.execute_input":"2024-07-31T01:00:47.334938Z","iopub.status.idle":"2024-07-31T01:00:48.632007Z","shell.execute_reply.started":"2024-07-31T01:00:47.334907Z","shell.execute_reply":"2024-07-31T01:00:48.630663Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/heart-attack-analysis-prediction-dataset/o2Saturation.csv\n/kaggle/input/heart-attack-analysis-prediction-dataset/heart.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Heart Attack Analysis & Prediction","metadata":{}},{"cell_type":"markdown","source":"# Problem Statement: Heart Attack Analysis & Prediction\n\n## Overview\n\nHeart disease remains a leading cause of mortality worldwide, making early detection and prevention crucial. The objective of this project is to develop a predictive model that can accurately assess the risk of heart attacks based on various clinical and lifestyle factors. By analyzing historical patient data, the project aims to identify significant predictors of heart disease and build a machine learning model to predict the likelihood of a heart attack.\n\n## Problem Definition\n\nHeart attack prediction involves analyzing patient health data to determine the probability of a heart attack occurring. This process requires understanding and evaluating various medical indicators and risk factors associated with heart disease. The dataset contains various features related to patient demographics, clinical measurements, and diagnostic results.\n\n## Dataset\n\nThe dataset includes the following features:\n\n- **age**: Age of the patient.\n- **sex**: Gender of the patient.\n- **cp**: Chest pain type.\n- **trtbps**: Resting blood pressure.\n- **chol**: Serum cholesterol level.\n- **fbs**: Fasting blood sugar level.\n- **restecg**: Resting electrocardiographic results.\n- **thalachh**: Maximum heart rate achieved.\n- **exng**: Exercise induced angina.\n- **oldpeak**: Depression induced by exercise.\n- **slp**: Slope of the peak exercise ST segment.\n- **caa**: Number of major vessels colored by fluoroscopy.\n- **thall**: Thalassemia.\n- **output**: Presence of heart disease (target variable).\n\n## Goals\n\n1. **Data Exploration & Preprocessing**: Perform exploratory data analysis to understand the dataset's structure, handle missing values, and normalize or standardize features as needed.\n2. **Feature Selection**: Identify and select the most significant features that contribute to the prediction of heart disease.\n3. **Model Development**: Build and evaluate various machine learning models (e.g., logistic regression, decision trees, random forests, support vector machines) to predict heart disease.\n4. **Model Evaluation**: Assess the performance of the models using metrics such as accuracy, precision, recall, F1-score, and ROC-AUC. Ensure that the model generalizes well to unseen data.\n5. **Implementation & Deployment**: Develop a user-friendly interface or application to provide predictions based on input data. This interface should be accessible to healthcare professionals for decision support.\n\n## Expected Outcomes\n\n- **Predictive Model**: A robust machine learning model capable of predicting the likelihood of a heart attack with high accuracy.\n- **Insights**: Identification of key factors contributing to heart disease risk.\n- **Tools & Resources**: A practical tool for healthcare professionals to assess patient risk and make informed decisions.\n\n## Impact\n\nThis predictive model aims to enhance early detection of heart disease, enabling timely intervention and personalized patient care. By leveraging historical data and advanced analytics, the project seeks to improve patient outcomes and contribute to better heart disease management strategies.\n","metadata":{}},{"cell_type":"markdown","source":"# 1. Import Libraries","metadata":{}},{"cell_type":"code","source":"# Data manipulation and visualization\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.subplots as sp\n\n# Machine learning libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import (\n    RandomForestClassifier,\n    GradientBoostingClassifier,\n    AdaBoostClassifier\n)\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nplot.subplots","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:10:57.744958Z","iopub.execute_input":"2024-07-31T01:10:57.746043Z","iopub.status.idle":"2024-07-31T01:11:00.591365Z","shell.execute_reply.started":"2024-07-31T01:10:57.745984Z","shell.execute_reply":"2024-07-31T01:11:00.590063Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"# 2. Load Data","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/heart-attack-analysis-prediction-dataset/heart.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:13:48.470195Z","iopub.execute_input":"2024-07-31T01:13:48.471110Z","iopub.status.idle":"2024-07-31T01:13:48.486887Z","shell.execute_reply.started":"2024-07-31T01:13:48.471071Z","shell.execute_reply":"2024-07-31T01:13:48.485556Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"# Step 2: Basic Information","metadata":{}},{"cell_type":"code","source":"# Display the first few rows\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:14:24.120788Z","iopub.execute_input":"2024-07-31T01:14:24.121200Z","iopub.status.idle":"2024-07-31T01:14:24.139022Z","shell.execute_reply.started":"2024-07-31T01:14:24.121168Z","shell.execute_reply":"2024-07-31T01:14:24.137835Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   age  sex  cp  trtbps  chol  fbs  restecg  thalachh  exng  oldpeak  slp  \\\n0   63    1   3     145   233    1        0       150     0      2.3    0   \n1   37    1   2     130   250    0        1       187     0      3.5    0   \n2   41    0   1     130   204    0        0       172     0      1.4    2   \n3   56    1   1     120   236    0        1       178     0      0.8    2   \n4   57    0   0     120   354    0        1       163     1      0.6    2   \n\n   caa  thall  output  \n0    0      1       1  \n1    0      2       1  \n2    0      2       1  \n3    0      2       1  \n4    0      2       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trtbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalachh</th>\n      <th>exng</th>\n      <th>oldpeak</th>\n      <th>slp</th>\n      <th>caa</th>\n      <th>thall</th>\n      <th>output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>63</td>\n      <td>1</td>\n      <td>3</td>\n      <td>145</td>\n      <td>233</td>\n      <td>1</td>\n      <td>0</td>\n      <td>150</td>\n      <td>0</td>\n      <td>2.3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37</td>\n      <td>1</td>\n      <td>2</td>\n      <td>130</td>\n      <td>250</td>\n      <td>0</td>\n      <td>1</td>\n      <td>187</td>\n      <td>0</td>\n      <td>3.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>41</td>\n      <td>0</td>\n      <td>1</td>\n      <td>130</td>\n      <td>204</td>\n      <td>0</td>\n      <td>0</td>\n      <td>172</td>\n      <td>0</td>\n      <td>1.4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>56</td>\n      <td>1</td>\n      <td>1</td>\n      <td>120</td>\n      <td>236</td>\n      <td>0</td>\n      <td>1</td>\n      <td>178</td>\n      <td>0</td>\n      <td>0.8</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>57</td>\n      <td>0</td>\n      <td>0</td>\n      <td>120</td>\n      <td>354</td>\n      <td>0</td>\n      <td>1</td>\n      <td>163</td>\n      <td>1</td>\n      <td>0.6</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Display the first last rows\ndf.tail()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:14:46.228608Z","iopub.execute_input":"2024-07-31T01:14:46.229018Z","iopub.status.idle":"2024-07-31T01:14:46.245691Z","shell.execute_reply.started":"2024-07-31T01:14:46.228986Z","shell.execute_reply":"2024-07-31T01:14:46.244154Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"     age  sex  cp  trtbps  chol  fbs  restecg  thalachh  exng  oldpeak  slp  \\\n298   57    0   0     140   241    0        1       123     1      0.2    1   \n299   45    1   3     110   264    0        1       132     0      1.2    1   \n300   68    1   0     144   193    1        1       141     0      3.4    1   \n301   57    1   0     130   131    0        1       115     1      1.2    1   \n302   57    0   1     130   236    0        0       174     0      0.0    1   \n\n     caa  thall  output  \n298    0      3       0  \n299    0      3       0  \n300    2      3       0  \n301    1      3       0  \n302    1      2       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trtbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalachh</th>\n      <th>exng</th>\n      <th>oldpeak</th>\n      <th>slp</th>\n      <th>caa</th>\n      <th>thall</th>\n      <th>output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>298</th>\n      <td>57</td>\n      <td>0</td>\n      <td>0</td>\n      <td>140</td>\n      <td>241</td>\n      <td>0</td>\n      <td>1</td>\n      <td>123</td>\n      <td>1</td>\n      <td>0.2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>45</td>\n      <td>1</td>\n      <td>3</td>\n      <td>110</td>\n      <td>264</td>\n      <td>0</td>\n      <td>1</td>\n      <td>132</td>\n      <td>0</td>\n      <td>1.2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>300</th>\n      <td>68</td>\n      <td>1</td>\n      <td>0</td>\n      <td>144</td>\n      <td>193</td>\n      <td>1</td>\n      <td>1</td>\n      <td>141</td>\n      <td>0</td>\n      <td>3.4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>301</th>\n      <td>57</td>\n      <td>1</td>\n      <td>0</td>\n      <td>130</td>\n      <td>131</td>\n      <td>0</td>\n      <td>1</td>\n      <td>115</td>\n      <td>1</td>\n      <td>1.2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>302</th>\n      <td>57</td>\n      <td>0</td>\n      <td>1</td>\n      <td>130</td>\n      <td>236</td>\n      <td>0</td>\n      <td>0</td>\n      <td>174</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Display the random rows\ndf.sample(5)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:15:31.765340Z","iopub.execute_input":"2024-07-31T01:15:31.765742Z","iopub.status.idle":"2024-07-31T01:15:31.783492Z","shell.execute_reply.started":"2024-07-31T01:15:31.765711Z","shell.execute_reply":"2024-07-31T01:15:31.782144Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"     age  sex  cp  trtbps  chol  fbs  restecg  thalachh  exng  oldpeak  slp  \\\n164   38    1   2     138   175    0        1       173     0      0.0    2   \n132   42    1   1     120   295    0        1       162     0      0.0    2   \n104   50    1   2     129   196    0        1       163     0      0.0    2   \n191   58    1   0     128   216    0        0       131     1      2.2    1   \n149   42    1   2     130   180    0        1       150     0      0.0    2   \n\n     caa  thall  output  \n164    4      2       1  \n132    0      2       1  \n104    0      2       1  \n191    3      3       0  \n149    0      2       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>cp</th>\n      <th>trtbps</th>\n      <th>chol</th>\n      <th>fbs</th>\n      <th>restecg</th>\n      <th>thalachh</th>\n      <th>exng</th>\n      <th>oldpeak</th>\n      <th>slp</th>\n      <th>caa</th>\n      <th>thall</th>\n      <th>output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>164</th>\n      <td>38</td>\n      <td>1</td>\n      <td>2</td>\n      <td>138</td>\n      <td>175</td>\n      <td>0</td>\n      <td>1</td>\n      <td>173</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>132</th>\n      <td>42</td>\n      <td>1</td>\n      <td>1</td>\n      <td>120</td>\n      <td>295</td>\n      <td>0</td>\n      <td>1</td>\n      <td>162</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>50</td>\n      <td>1</td>\n      <td>2</td>\n      <td>129</td>\n      <td>196</td>\n      <td>0</td>\n      <td>1</td>\n      <td>163</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>191</th>\n      <td>58</td>\n      <td>1</td>\n      <td>0</td>\n      <td>128</td>\n      <td>216</td>\n      <td>0</td>\n      <td>0</td>\n      <td>131</td>\n      <td>1</td>\n      <td>2.2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>42</td>\n      <td>1</td>\n      <td>2</td>\n      <td>130</td>\n      <td>180</td>\n      <td>0</td>\n      <td>1</td>\n      <td>150</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Display basic information about the dataset\nprint(\"Dataset Information:\")\nprint(df.info())","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:16:00.512067Z","iopub.execute_input":"2024-07-31T01:16:00.512979Z","iopub.status.idle":"2024-07-31T01:16:00.538242Z","shell.execute_reply.started":"2024-07-31T01:16:00.512940Z","shell.execute_reply":"2024-07-31T01:16:00.537071Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Dataset Information:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 303 entries, 0 to 302\nData columns (total 14 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   age       303 non-null    int64  \n 1   sex       303 non-null    int64  \n 2   cp        303 non-null    int64  \n 3   trtbps    303 non-null    int64  \n 4   chol      303 non-null    int64  \n 5   fbs       303 non-null    int64  \n 6   restecg   303 non-null    int64  \n 7   thalachh  303 non-null    int64  \n 8   exng      303 non-null    int64  \n 9   oldpeak   303 non-null    float64\n 10  slp       303 non-null    int64  \n 11  caa       303 non-null    int64  \n 12  thall     303 non-null    int64  \n 13  output    303 non-null    int64  \ndtypes: float64(1), int64(13)\nmemory usage: 33.3 KB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"# Display summary statistics for numerical features\nprint(\"\\nSummary Statistics:\")\nprint(df.describe())","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:16:28.448714Z","iopub.execute_input":"2024-07-31T01:16:28.449153Z","iopub.status.idle":"2024-07-31T01:16:28.494704Z","shell.execute_reply.started":"2024-07-31T01:16:28.449103Z","shell.execute_reply":"2024-07-31T01:16:28.493609Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"\nSummary Statistics:\n              age         sex          cp      trtbps        chol         fbs  \\\ncount  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \nmean    54.366337    0.683168    0.966997  131.623762  246.264026    0.148515   \nstd      9.082101    0.466011    1.032052   17.538143   51.830751    0.356198   \nmin     29.000000    0.000000    0.000000   94.000000  126.000000    0.000000   \n25%     47.500000    0.000000    0.000000  120.000000  211.000000    0.000000   \n50%     55.000000    1.000000    1.000000  130.000000  240.000000    0.000000   \n75%     61.000000    1.000000    2.000000  140.000000  274.500000    0.000000   \nmax     77.000000    1.000000    3.000000  200.000000  564.000000    1.000000   \n\n          restecg    thalachh        exng     oldpeak         slp         caa  \\\ncount  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \nmean     0.528053  149.646865    0.326733    1.039604    1.399340    0.729373   \nstd      0.525860   22.905161    0.469794    1.161075    0.616226    1.022606   \nmin      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n25%      0.000000  133.500000    0.000000    0.000000    1.000000    0.000000   \n50%      1.000000  153.000000    0.000000    0.800000    1.000000    0.000000   \n75%      1.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \nmax      2.000000  202.000000    1.000000    6.200000    2.000000    4.000000   \n\n            thall      output  \ncount  303.000000  303.000000  \nmean     2.313531    0.544554  \nstd      0.612277    0.498835  \nmin      0.000000    0.000000  \n25%      2.000000    0.000000  \n50%      2.000000    1.000000  \n75%      3.000000    1.000000  \nmax      3.000000    1.000000  \n","output_type":"stream"}]},{"cell_type":"code","source":"# Check for missing values\nmissing_values = df.isnull().sum()\nprint(missing_values)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:21:14.265507Z","iopub.execute_input":"2024-07-31T01:21:14.266010Z","iopub.status.idle":"2024-07-31T01:21:14.275508Z","shell.execute_reply.started":"2024-07-31T01:21:14.265975Z","shell.execute_reply":"2024-07-31T01:21:14.273362Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"age         0\nsex         0\ncp          0\ntrtbps      0\nchol        0\nfbs         0\nrestecg     0\nthalachh    0\nexng        0\noldpeak     0\nslp         0\ncaa         0\nthall       0\noutput      0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Step 3: Data Cleaning","metadata":{}},{"cell_type":"code","source":"# Check for missing values\nmissing_values = df.isnull().sum()\n\n# Print message indicating the data is already cleaned\nif missing_values.sum() == 0:\n    print(\"The data is already cleaned. No need for further cleaning.\")\nelse:\n    print(\"Missing Values in Each Column:\")\n    print(missing_values)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T01:24:58.740490Z","iopub.execute_input":"2024-07-31T01:24:58.740946Z","iopub.status.idle":"2024-07-31T01:24:58.748585Z","shell.execute_reply.started":"2024-07-31T01:24:58.740910Z","shell.execute_reply":"2024-07-31T01:24:58.747310Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"The data is already cleaned. No need for further cleaning.\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}