{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8694889,"sourceType":"datasetVersion","datasetId":5214218}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/usmanshafeeqdit/user-opinion-classification-of-daraz-shopping?scriptVersionId=187330417\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-08T07:53:34.662216Z","iopub.execute_input":"2024-07-08T07:53:34.662951Z","iopub.status.idle":"2024-07-08T07:53:34.669844Z","shell.execute_reply.started":"2024-07-08T07:53:34.662912Z","shell.execute_reply":"2024-07-08T07:53:34.668794Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"# Opinion Classification of Daraz Shopping User based on Machine Learning","metadata":{}},{"cell_type":"markdown","source":" # Import important libraries ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\n\nfrom sklearn.metrics import (confusion_matrix,classification_report,roc_curve,auc,precision_recall_curve,average_precision_score)\nfrom sklearn.model_selection import (train_test_split,StratifiedShuffleSplit,StratifiedKFold,cross_val_predict,learning_curve)\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import accuracy_score","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.672151Z","iopub.execute_input":"2024-07-08T07:53:34.672639Z","iopub.status.idle":"2024-07-08T07:53:34.682897Z","shell.execute_reply.started":"2024-07-08T07:53:34.672602Z","shell.execute_reply":"2024-07-08T07:53:34.680516Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"# load the data set","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/daraz-code-mixed-product-reviews/daraz-code-mixed-product-reviews.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.684946Z","iopub.execute_input":"2024-07-08T07:53:34.685359Z","iopub.status.idle":"2024-07-08T07:53:34.815192Z","shell.execute_reply.started":"2024-07-08T07:53:34.685321Z","shell.execute_reply":"2024-07-08T07:53:34.81044Z"},"trusted":true},"execution_count":10,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[10], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m/kaggle/input/daraz-code-mixed-product-reviews/daraz-code-mixed-product-reviews.csv\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1026\u001b[0m, in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1013\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[1;32m   1014\u001b[0m     dialect,\n\u001b[1;32m   1015\u001b[0m     delimiter,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1022\u001b[0m     dtype_backend\u001b[38;5;241m=\u001b[39mdtype_backend,\n\u001b[1;32m   1023\u001b[0m )\n\u001b[1;32m   1024\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[0;32m-> 1026\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/io/parsers/readers.py:620\u001b[0m, in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    617\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    619\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[0;32m--> 620\u001b[0m parser \u001b[38;5;241m=\u001b[39m \u001b[43mTextFileReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    622\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[1;32m    623\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1620\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1617\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m   1619\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m-> 1620\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1880\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[1;32m   1879\u001b[0m         mode \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1880\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1881\u001b[0m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1882\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1883\u001b[0m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1884\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcompression\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1885\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmemory_map\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1886\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1887\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding_errors\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstrict\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1888\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstorage_options\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1889\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1890\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1891\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/io/common.py:873\u001b[0m, in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    868\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[1;32m    869\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[1;32m    870\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[1;32m    871\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[1;32m    872\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[0;32m--> 873\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[1;32m    874\u001b[0m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    875\u001b[0m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    877\u001b[0m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    878\u001b[0m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    879\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    880\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    881\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[1;32m    882\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/input/daraz-code-mixed-product-reviews/daraz-code-mixed-product-reviews.csv'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/kaggle/input/daraz-code-mixed-product-reviews/daraz-code-mixed-product-reviews.csv'","output_type":"error"}]},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{}},{"cell_type":"markdown","source":"# 1. Understand the Dataset","metadata":{}},{"cell_type":"code","source":"# Display the data types\ndf.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.816619Z","iopub.status.idle":"2024-07-08T07:53:34.817167Z","shell.execute_reply.started":"2024-07-08T07:53:34.816925Z","shell.execute_reply":"2024-07-08T07:53:34.816949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display rows and columns of data set\nprint(\"Number of rows in dataset :\",df.shape[0])\nprint(\"\\nNumber of columns in dataset :\",df.shape[1] )","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.81838Z","iopub.status.idle":"2024-07-08T07:53:34.818806Z","shell.execute_reply.started":"2024-07-08T07:53:34.818585Z","shell.execute_reply":"2024-07-08T07:53:34.818602Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check missing values in columns\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.820254Z","iopub.status.idle":"2024-07-08T07:53:34.820619Z","shell.execute_reply.started":"2024-07-08T07:53:34.820441Z","shell.execute_reply":"2024-07-08T07:53:34.820456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check the index\ndf.index","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.821954Z","iopub.status.idle":"2024-07-08T07:53:34.822314Z","shell.execute_reply.started":"2024-07-08T07:53:34.822141Z","shell.execute_reply":"2024-07-08T07:53:34.822157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Transposing your data\ndf.T","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.823971Z","iopub.status.idle":"2024-07-08T07:53:34.824339Z","shell.execute_reply.started":"2024-07-08T07:53:34.824165Z","shell.execute_reply":"2024-07-08T07:53:34.824181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 2. Summary Statistics","metadata":{}},{"cell_type":"code","source":"# Display first few row of data set\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.825756Z","iopub.status.idle":"2024-07-08T07:53:34.826111Z","shell.execute_reply.started":"2024-07-08T07:53:34.825937Z","shell.execute_reply":"2024-07-08T07:53:34.825952Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display last few row of data set\ndf.tail()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.828181Z","iopub.status.idle":"2024-07-08T07:53:34.828601Z","shell.execute_reply.started":"2024-07-08T07:53:34.828359Z","shell.execute_reply":"2024-07-08T07:53:34.828373Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display the basic information of data set\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.829996Z","iopub.status.idle":"2024-07-08T07:53:34.830349Z","shell.execute_reply.started":"2024-07-08T07:53:34.830179Z","shell.execute_reply":"2024-07-08T07:53:34.830194Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display the columns of of data set\ndf.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.831673Z","iopub.status.idle":"2024-07-08T07:53:34.832037Z","shell.execute_reply.started":"2024-07-08T07:53:34.831865Z","shell.execute_reply":"2024-07-08T07:53:34.831881Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display  basic statistic about data set\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.833509Z","iopub.status.idle":"2024-07-08T07:53:34.833882Z","shell.execute_reply.started":"2024-07-08T07:53:34.833704Z","shell.execute_reply":"2024-07-08T07:53:34.83372Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Count unique values in each columns\ndf.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.8349Z","iopub.status.idle":"2024-07-08T07:53:34.835235Z","shell.execute_reply.started":"2024-07-08T07:53:34.835073Z","shell.execute_reply":"2024-07-08T07:53:34.835087Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# 3. Data Visualization","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\n\n# Visualize the distribution of sentiments\nsns.countplot(data=df , x='Sentiments')","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.83623Z","iopub.status.idle":"2024-07-08T07:53:34.836564Z","shell.execute_reply.started":"2024-07-08T07:53:34.836401Z","shell.execute_reply":"2024-07-08T07:53:34.836415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n# Analyze the length of reviews\ndf['review_length'] = df['Reviews'].str.len()\nsns.histplot(df['review_length'], bins=50)\nplt.xlabel('Review Length')\nplt.title('Distribution of Review Lengths')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.83791Z","iopub.status.idle":"2024-07-08T07:53:34.838247Z","shell.execute_reply.started":"2024-07-08T07:53:34.838084Z","shell.execute_reply":"2024-07-08T07:53:34.838098Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Bivariate Analysis","metadata":{}},{"cell_type":"code","source":"# Word Clouds: For visualizing the most frequent words in positive vs. negative reviews.\n\n# Function to generate and display a word cloud\ndef generate_word_cloud(text, title):\n    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title(title)\n    plt.show()\n    \n# Separate the positive and negative reviews\npositive_reviews = df[df['Sentiments'] == 'positive']['Reviews'].str.cat(sep=' ')\nnegative_reviews = df[df['Sentiments'] == 'negative']['Reviews'].str.cat(sep='')","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.840031Z","iopub.status.idle":"2024-07-08T07:53:34.840374Z","shell.execute_reply.started":"2024-07-08T07:53:34.840208Z","shell.execute_reply":"2024-07-08T07:53:34.840223Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Generate word clouds || positive_reviews\ngenerate_word_cloud(positive_reviews, 'Word Cloud for Positive Reviews')","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.841296Z","iopub.status.idle":"2024-07-08T07:53:34.841624Z","shell.execute_reply.started":"2024-07-08T07:53:34.841464Z","shell.execute_reply":"2024-07-08T07:53:34.841477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"generate_word_cloud(negative_reviews, 'Word Cloud for Negative Reviews')","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.842987Z","iopub.status.idle":"2024-07-08T07:53:34.843308Z","shell.execute_reply.started":"2024-07-08T07:53:34.84315Z","shell.execute_reply":"2024-07-08T07:53:34.843164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 4. Data Cleaning","metadata":{}},{"cell_type":"code","source":"# Check missing value in data set\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.8452Z","iopub.status.idle":"2024-07-08T07:53:34.845556Z","shell.execute_reply.started":"2024-07-08T07:53:34.845377Z","shell.execute_reply":"2024-07-08T07:53:34.845392Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check duplicate value\ndf.duplicated()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.846948Z","iopub.status.idle":"2024-07-08T07:53:34.847307Z","shell.execute_reply.started":"2024-07-08T07:53:34.847127Z","shell.execute_reply":"2024-07-08T07:53:34.847142Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 5. Model Implementation","metadata":{}},{"cell_type":"code","source":"# Assign the 'Reviews' column to the feature variable X\nX = df['Reviews']\n\n# Assign the 'Sentiments' column to the target variable y\ny = df['Sentiments']","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.848557Z","iopub.status.idle":"2024-07-08T07:53:34.848932Z","shell.execute_reply.started":"2024-07-08T07:53:34.848753Z","shell.execute_reply":"2024-07-08T07:53:34.848769Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Splitting the dataset into training (80%) and testing (20%) sets","metadata":{}},{"cell_type":"code","source":"sss = StratifiedShuffleSplit(n_splits= 3,test_size=0.2,random_state=42)\nfor train_index, test_index in sss.split(X,y):\n    X_train,X_test = X[train_index], X[test_index]\n    y_train,y_test = y.iloc[train_index], y.iloc[test_index]","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.850133Z","iopub.status.idle":"2024-07-08T07:53:34.850471Z","shell.execute_reply.started":"2024-07-08T07:53:34.850309Z","shell.execute_reply":"2024-07-08T07:53:34.850322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Feature Extraction","metadata":{}},{"cell_type":"code","source":"# Convert text to a matrix of token counts\nvectorizer = CountVectorizer(binary=True)\n\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.851761Z","iopub.status.idle":"2024-07-08T07:53:34.852134Z","shell.execute_reply.started":"2024-07-08T07:53:34.851957Z","shell.execute_reply":"2024-07-08T07:53:34.851976Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Training Model","metadata":{}},{"cell_type":"code","source":"# Define the classifiers\nsgd_clf = SGDClassifier(max_iter=1000, tol=1e-3, random_state=42)\nlog_reg_clf = LogisticRegression(max_iter=1000, random_state=42)\ntree_clf = DecisionTreeClassifier(random_state=42)\nforest_clf = RandomForestClassifier(n_estimators=100, random_state=42)\nknn_clf = KNeighborsClassifier()\nsvm_clf = SVC(kernel='linear', random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.85334Z","iopub.status.idle":"2024-07-08T07:53:34.853731Z","shell.execute_reply.started":"2024-07-08T07:53:34.853518Z","shell.execute_reply":"2024-07-08T07:53:34.853533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# List of classifiers for iteration\nclassifiers = [\n    ('SGD Classifier', sgd_clf),\n    ('Logistic Regression', log_reg_clf),\n    ('Decision Tree', tree_clf),\n    ('Random Forest', forest_clf),\n    ('K-Nearest Neighbors', knn_clf),\n    ('Support Vector Machine', svm_clf)\n]","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.854838Z","iopub.status.idle":"2024-07-08T07:53:34.855178Z","shell.execute_reply.started":"2024-07-08T07:53:34.855014Z","shell.execute_reply":"2024-07-08T07:53:34.855029Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Cross-Validation Classification Report","metadata":{}},{"cell_type":"code","source":"# Train and evaluate each classifier using cross-validation\nfor name, clf in classifiers:\n    y_pred_cv = cross_val_predict(clf, X_train, y_train, cv=3)\n    clf.fit(X_train, y_train)\n    accuracy = accuracy_score(y_train, y_pred_cv)\n    print(f\"{name} Accuracy: {accuracy:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.856962Z","iopub.status.idle":"2024-07-08T07:53:34.857311Z","shell.execute_reply.started":"2024-07-08T07:53:34.857142Z","shell.execute_reply":"2024-07-08T07:53:34.857156Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Validation Set Classification Report","metadata":{}},{"cell_type":"code","source":"y_pred_sgd_val = sgd_clf.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.85815Z","iopub.status.idle":"2024-07-08T07:53:34.85849Z","shell.execute_reply.started":"2024-07-08T07:53:34.858321Z","shell.execute_reply":"2024-07-08T07:53:34.858335Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"report_ssgd_val = classification_report(y_test,y_pred_sgd_val)\nprint(report_ssgd_val)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.859761Z","iopub.status.idle":"2024-07-08T07:53:34.860102Z","shell.execute_reply.started":"2024-07-08T07:53:34.859935Z","shell.execute_reply":"2024-07-08T07:53:34.859951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Learning Curve (SGDClassifier)","metadata":{}},{"cell_type":"code","source":"def plot_learning_curve(estimator, title, X, y, cv=None, n_jobs=None):\n    plt.figure()\n    plt.title(title)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=np.linspace(0.1, 1.0, 5)\n    )\n\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt\n\nsgd_clf = SGDClassifier(max_iter=1000, tol=1e-3, random_state=42)\nplot_learning_curve(sgd_clf, \"Learning Curve (SGDClassifier)\", X_train, y_train, cv=3)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.861125Z","iopub.status.idle":"2024-07-08T07:53:34.861449Z","shell.execute_reply.started":"2024-07-08T07:53:34.86129Z","shell.execute_reply":"2024-07-08T07:53:34.861303Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Receiver Operating Characteristic for Multiclass","metadata":{}},{"cell_type":"code","source":"# Assuming y_train and y_test are your labels\nclasses = np.unique(y_train)\ny_train_bin = label_binarize(y_train, classes=classes)\ny_test_bin = label_binarize(y_test, classes=classes)\n\n# Train the One-vs-Rest classifier\nsgd_clf = SGDClassifier(max_iter=1000, tol=1e-3, random_state=42)\novr_clf = OneVsRestClassifier(sgd_clf)\novr_clf.fit(X_train, y_train_bin)\n\n# Compute ROC curve and ROC area for each class\ny_score = ovr_clf.decision_function(X_test)\n\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\nfor i in range(len(classes)):\n    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_score[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n\n# Plot ROC curves for each class\nplt.figure()\nfor i in range(len(classes)):\n    plt.plot(fpr[i], tpr[i], lw=2, label=f'Class {classes[i]} (area = {roc_auc[i]:.2f})')\n\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic for Multiclass')\nplt.legend(loc=\"lower right\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.863318Z","iopub.status.idle":"2024-07-08T07:53:34.863696Z","shell.execute_reply.started":"2024-07-08T07:53:34.8635Z","shell.execute_reply":"2024-07-08T07:53:34.863515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Precision-Recall curve for Multiclass","metadata":{}},{"cell_type":"code","source":"# Compute Precision-Recall and plot curve\nprecision = dict()\nrecall = dict()\naverage_precision = dict()\nfor i in range(len(classes)):\n    precision[i], recall[i], _ = precision_recall_curve(y_test_bin[:, i], y_score[:, i])\n    average_precision[i] = average_precision_score(y_test_bin[:, i], y_score[:, i])\n\n# Compute micro-average Precision-Recall curve and average precision\nprecision[\"micro\"], recall[\"micro\"], _ = precision_recall_curve(y_test_bin.ravel(), y_score.ravel())\naverage_precision[\"micro\"] = average_precision_score(y_test_bin, y_score, average=\"micro\")\n\n# Plot Precision-Recall curve for each class\nplt.figure()\nplt.plot(recall[\"micro\"], precision[\"micro\"],\n         label='micro-average Precision-Recall curve (area = {0:0.2f})'\n               ''.format(average_precision[\"micro\"]),\n         color='deeppink', linestyle=':', linewidth=4)\n\nfor i in range(len(classes)):\n    plt.plot(recall[i], precision[i], lw=2, label=f'Class {classes[i]} (area = {average_precision[i]:.2f})')\n\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall curve for Multiclass')\nplt.legend(loc=\"lower right\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:53:34.864674Z","iopub.status.idle":"2024-07-08T07:53:34.865006Z","shell.execute_reply.started":"2024-07-08T07:53:34.864843Z","shell.execute_reply":"2024-07-08T07:53:34.864857Z"},"trusted":true},"execution_count":null,"outputs":[]}]}