{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "93bf1035",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:15.913933Z",
     "iopub.status.busy": "2024-06-19T05:05:15.913566Z",
     "iopub.status.idle": "2024-06-19T05:05:16.841992Z",
     "shell.execute_reply": "2024-06-19T05:05:16.840959Z"
    },
    "papermill": {
     "duration": 0.936793,
     "end_time": "2024-06-19T05:05:16.844488",
     "exception": false,
     "start_time": "2024-06-19T05:05:15.907695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3235c26d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:16.856188Z",
     "iopub.status.busy": "2024-06-19T05:05:16.854849Z",
     "iopub.status.idle": "2024-06-19T05:05:18.258408Z",
     "shell.execute_reply": "2024-06-19T05:05:18.257225Z"
    },
    "papermill": {
     "duration": 1.411323,
     "end_time": "2024-06-19T05:05:18.260877",
     "exception": false,
     "start_time": "2024-06-19T05:05:16.849554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Importing necessary libraries\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "73e2ff79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.270741Z",
     "iopub.status.busy": "2024-06-19T05:05:18.269782Z",
     "iopub.status.idle": "2024-06-19T05:05:18.278808Z",
     "shell.execute_reply": "2024-06-19T05:05:18.277592Z"
    },
    "papermill": {
     "duration": 0.016473,
     "end_time": "2024-06-19T05:05:18.281263",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.264790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating a sample dataframe (assuming X_train, X_test, y_train, y_test are already defined)\n",
    "data = {\n",
    "    'X1': [1, 2, 3, 4, 5],\n",
    "    'X2': [2, 3, 4, 5, 6],\n",
    "    'X3': [3, 4, 5, 6, 7],\n",
    "    'y': [10, 20, 30, 40, 50]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dc12437c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.290765Z",
     "iopub.status.busy": "2024-06-19T05:05:18.290409Z",
     "iopub.status.idle": "2024-06-19T05:05:18.312624Z",
     "shell.execute_reply": "2024-06-19T05:05:18.311419Z"
    },
    "papermill": {
     "duration": 0.02984,
     "end_time": "2024-06-19T05:05:18.315126",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.285286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1  X2  X3   y\n",
       "0   1   2   3  10\n",
       "1   2   3   4  20\n",
       "2   3   4   5  30\n",
       "3   4   5   6  40\n",
       "4   5   6   7  50"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "54ce1f11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.324732Z",
     "iopub.status.busy": "2024-06-19T05:05:18.324372Z",
     "iopub.status.idle": "2024-06-19T05:05:18.334425Z",
     "shell.execute_reply": "2024-06-19T05:05:18.333438Z"
    },
    "papermill": {
     "duration": 0.017524,
     "end_time": "2024-06-19T05:05:18.336709",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.319185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Assuming X contains the features and y contains the target variable\n",
    "X = df[['X1', 'X2', 'X3']]\n",
    "y = df['y']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "727a7eaa",
   "metadata": {
    "papermill": {
     "duration": 0.003702,
     "end_time": "2024-06-19T05:05:18.344485",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.340783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Splitting the data into training and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "769f283c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.354231Z",
     "iopub.status.busy": "2024-06-19T05:05:18.353812Z",
     "iopub.status.idle": "2024-06-19T05:05:18.364376Z",
     "shell.execute_reply": "2024-06-19T05:05:18.363328Z"
    },
    "papermill": {
     "duration": 0.018172,
     "end_time": "2024-06-19T05:05:18.366714",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.348542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd7d6434",
   "metadata": {
    "papermill": {
     "duration": 0.003694,
     "end_time": "2024-06-19T05:05:18.374473",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.370779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Linear Regression || Supervised Learning Models\n",
    "Used for predicting a continuous target variable based on one or more features.\n",
    "\n",
    "Linear regression is a statistical technique used to model the relationship between a dependent variable (often denoted as \n",
    "ùë¶\n",
    "y) and one or more independent variables (often denoted as \n",
    "ùë•\n",
    "x). The basic idea is to find a linear equation that best fits the data points.\n",
    "\n",
    "Linear regression can be applied to various types of datasets where there is a relationship between a dependent variable (response variable) and one or more independent variables (predictors). Here are some common types of datasets where linear regression is frequently used:\n",
    "\n",
    "Biomedical Research: Linear regression can be used to analyze clinical trial data to understand how changes in independent variables (like dosage or treatment duration) affect a dependent variable (like patient health outcomes).\n",
    "\n",
    "Economics: In economics, linear regression is used to study relationships between variables such as income and spending, interest rates and investment, or inflation and unemployment rates.\n",
    "\n",
    "Marketing and Business: Linear regression is applied to analyze customer behavior data, such as the relationship between advertising spending and sales revenue, or customer demographics and purchasing patterns.\n",
    "\n",
    "Social Sciences: Researchers use linear regression to study relationships between variables such as education level and income, crime rates and demographic factors, or political attitudes and voting behavior.\n",
    "\n",
    "Environmental Science: Linear regression can be used to analyze data on factors like pollution levels and health outcomes, climate variables and biodiversity, or habitat characteristics and species distribution.\n",
    "\n",
    "Education: Linear regression is applied to educational research to study factors such as student test scores and teaching methods, school funding and academic performance, or demographic factors and graduation rates.\n",
    "\n",
    "Quality Control and Manufacturing: Linear regression is used in industrial settings to analyze data on factors like production process parameters and product quality, or environmental conditions and equipment performance.\n",
    "\n",
    "Psychology: Researchers use linear regression to study relationships between variables such as personality traits and behavior, therapy methods and treatment outcomes, or environmental factors and mental health."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9563a659",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.383975Z",
     "iopub.status.busy": "2024-06-19T05:05:18.383621Z",
     "iopub.status.idle": "2024-06-19T05:05:18.388517Z",
     "shell.execute_reply": "2024-06-19T05:05:18.387379Z"
    },
    "papermill": {
     "duration": 0.012307,
     "end_time": "2024-06-19T05:05:18.390691",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.378384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating a linear regression model\n",
    "model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d81923f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.400454Z",
     "iopub.status.busy": "2024-06-19T05:05:18.400061Z",
     "iopub.status.idle": "2024-06-19T05:05:18.433398Z",
     "shell.execute_reply": "2024-06-19T05:05:18.432237Z"
    },
    "papermill": {
     "duration": 0.04098,
     "end_time": "2024-06-19T05:05:18.435781",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.394801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fitting the model to the training data\n",
    "model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "10f3366d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.445971Z",
     "iopub.status.busy": "2024-06-19T05:05:18.445581Z",
     "iopub.status.idle": "2024-06-19T05:05:18.452096Z",
     "shell.execute_reply": "2024-06-19T05:05:18.451071Z"
    },
    "papermill": {
     "duration": 0.014156,
     "end_time": "2024-06-19T05:05:18.454262",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.440106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Making predictions on the test data\n",
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e8791eac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.464437Z",
     "iopub.status.busy": "2024-06-19T05:05:18.464021Z",
     "iopub.status.idle": "2024-06-19T05:05:18.470267Z",
     "shell.execute_reply": "2024-06-19T05:05:18.469117Z"
    },
    "papermill": {
     "duration": 0.014092,
     "end_time": "2024-06-19T05:05:18.472714",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.458622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "predictions [30.]\n"
     ]
    }
   ],
   "source": [
    "# Printing the predictions\n",
    "print('predictions',y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7dd633e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T05:05:18.482842Z",
     "iopub.status.busy": "2024-06-19T05:05:18.482466Z",
     "iopub.status.idle": "2024-06-19T05:05:18.489393Z",
     "shell.execute_reply": "2024-06-19T05:05:18.488092Z"
    },
    "papermill": {
     "duration": 0.014879,
     "end_time": "2024-06-19T05:05:18.491833",
     "exception": false,
     "start_time": "2024-06-19T05:05:18.476954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 0.0\n"
     ]
    }
   ],
   "source": [
    "# Evaluating the model\n",
    "mse = mean_squared_error(y_test,y_pred)\n",
    "print(\"Mean Squared Error:\", mse)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.965176,
   "end_time": "2024-06-19T05:05:19.117533",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-19T05:05:13.152357",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
