{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aacd1e04",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-21T06:54:54.907474Z",
     "iopub.status.busy": "2024-07-21T06:54:54.906344Z",
     "iopub.status.idle": "2024-07-21T06:54:55.748113Z",
     "shell.execute_reply": "2024-07-21T06:54:55.746815Z"
    },
    "papermill": {
     "duration": 0.854659,
     "end_time": "2024-07-21T06:54:55.751244",
     "exception": false,
     "start_time": "2024-07-21T06:54:54.896585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/computer-network-traffic/cs448b_ipasn.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8fa7ac4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:54:55.768889Z",
     "iopub.status.busy": "2024-07-21T06:54:55.768083Z",
     "iopub.status.idle": "2024-07-21T06:55:09.978225Z",
     "shell.execute_reply": "2024-07-21T06:55:09.977320Z"
    },
    "papermill": {
     "duration": 14.221487,
     "end_time": "2024-07-21T06:55:09.980880",
     "exception": false,
     "start_time": "2024-07-21T06:54:55.759393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-21 06:54:59.037350: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-21 06:54:59.037488: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-21 06:54:59.176251: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, LSTM, GRU, Conv1D, MaxPooling1D, Flatten\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a9549a0",
   "metadata": {
    "papermill": {
     "duration": 0.007266,
     "end_time": "2024-07-21T06:55:09.995901",
     "exception": false,
     "start_time": "2024-07-21T06:55:09.988635",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Network Traffic Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "190299ab",
   "metadata": {
    "papermill": {
     "duration": 0.007153,
     "end_time": "2024-07-21T06:55:10.010655",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.003502",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 1 : Load the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c066fa33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.027535Z",
     "iopub.status.busy": "2024-07-21T06:55:10.026825Z",
     "iopub.status.idle": "2024-07-21T06:55:10.098884Z",
     "shell.execute_reply": "2024-07-21T06:55:10.097963Z"
    },
    "papermill": {
     "duration": 0.083507,
     "end_time": "2024-07-21T06:55:10.101513",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.018006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load and preprocess data\n",
    "def load_and_preprocess_data(file_path):\n",
    "    df = pd.read_csv(file_path)\n",
    "    df['date'] = pd.to_datetime(df['date'])\n",
    "    df = df.groupby(['date', 'l_ipn'], as_index=False).sum()\n",
    "    df['yday'] = df['date'].dt.dayofyear\n",
    "    df['wday'] = df['date'].dt.dayofweek\n",
    "    return df\n",
    "\n",
    "df = load_and_preprocess_data('../input/computer-network-traffic/cs448b_ipasn.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f4183f0",
   "metadata": {
    "papermill": {
     "duration": 0.007281,
     "end_time": "2024-07-21T06:55:10.116696",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.109415",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Basic information about data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9142a71b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.133235Z",
     "iopub.status.busy": "2024-07-21T06:55:10.132869Z",
     "iopub.status.idle": "2024-07-21T06:55:10.143099Z",
     "shell.execute_reply": "2024-07-21T06:55:10.141900Z"
    },
    "papermill": {
     "duration": 0.021359,
     "end_time": "2024-07-21T06:55:10.145541",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.124182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First Few Rows of the Dataset:\n",
      "==================================================\n",
      "        date  l_ipn   r_asn     f  yday  wday\n",
      "0 2006-07-01      0  436704   106   182     5\n",
      "1 2006-07-01      1  182194   640   182     5\n",
      "2 2006-07-01      2  212966  1677   182     5\n",
      "3 2006-07-01      3   96376    22   182     5\n",
      "4 2006-07-01      4  120507   184   182     5\n"
     ]
    }
   ],
   "source": [
    "# Display the first few rows of the dataset\n",
    "print(\"First Few Rows of the Dataset:\")\n",
    "print(\"=\"*50)\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "25e327f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.162154Z",
     "iopub.status.busy": "2024-07-21T06:55:10.161826Z",
     "iopub.status.idle": "2024-07-21T06:55:10.169610Z",
     "shell.execute_reply": "2024-07-21T06:55:10.168620Z"
    },
    "papermill": {
     "duration": 0.019672,
     "end_time": "2024-07-21T06:55:10.172714",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.153042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Last Few Rows of Dataset\n",
      "==================================================\n",
      "          date  l_ipn    r_asn     f  yday  wday\n",
      "842 2006-09-30      2   885320  5560   273     5\n",
      "843 2006-09-30      4   224766  3169   273     5\n",
      "844 2006-09-30      7    56412   106   273     5\n",
      "845 2006-09-30      8  1040239  3382   273     5\n",
      "846 2006-09-30      9    18297     4   273     5\n"
     ]
    }
   ],
   "source": [
    "# Display last few rows of dataset\n",
    "print(\"Last Few Rows of Dataset\")\n",
    "print(\"=\"*50)\n",
    "print(df.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d324f3ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.189460Z",
     "iopub.status.busy": "2024-07-21T06:55:10.188806Z",
     "iopub.status.idle": "2024-07-21T06:55:10.199834Z",
     "shell.execute_reply": "2024-07-21T06:55:10.198842Z"
    },
    "papermill": {
     "duration": 0.02224,
     "end_time": "2024-07-21T06:55:10.202490",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.180250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample Rows of the Dataset:\n",
      "==================================================\n",
      "          date  l_ipn   r_asn    f  yday  wday\n",
      "357 2006-08-05      7   90842   65   217     5\n",
      "217 2006-07-22      7   41679   55   203     5\n",
      "120 2006-07-13      0  686709  145   194     3\n",
      "456 2006-08-15      6  111829   41   227     1\n",
      "358 2006-08-05      8   92938  274   217     5\n"
     ]
    }
   ],
   "source": [
    "# Display a Sample of Rows from the Dataset\n",
    "print(\"Sample Rows of the Dataset:\")\n",
    "print(\"=\"*50)\n",
    "sample_rows = df.sample(5)\n",
    "print(sample_rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f4f1d6d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.219633Z",
     "iopub.status.busy": "2024-07-21T06:55:10.219017Z",
     "iopub.status.idle": "2024-07-21T06:55:10.232966Z",
     "shell.execute_reply": "2024-07-21T06:55:10.231885Z"
    },
    "papermill": {
     "duration": 0.024914,
     "end_time": "2024-07-21T06:55:10.235155",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.210241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Information:\n",
      "==================================================\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 847 entries, 0 to 846\n",
      "Data columns (total 6 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   date    847 non-null    datetime64[ns]\n",
      " 1   l_ipn   847 non-null    int64         \n",
      " 2   r_asn   847 non-null    int64         \n",
      " 3   f       847 non-null    int64         \n",
      " 4   yday    847 non-null    int32         \n",
      " 5   wday    847 non-null    int32         \n",
      "dtypes: datetime64[ns](1), int32(2), int64(3)\n",
      "memory usage: 33.2 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Basic Information about the Dataset\n",
    "print(\"Dataset Information:\")\n",
    "print(\"=\"*50)\n",
    "df_info = df.info()\n",
    "\n",
    "# Printing dataset information\n",
    "print(df_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ef785c9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.252324Z",
     "iopub.status.busy": "2024-07-21T06:55:10.252011Z",
     "iopub.status.idle": "2024-07-21T06:55:10.278011Z",
     "shell.execute_reply": "2024-07-21T06:55:10.276574Z"
    },
    "papermill": {
     "duration": 0.037653,
     "end_time": "2024-07-21T06:55:10.280539",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.242886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary Statistics of the Dataset:\n",
      "==================================================\n",
      "                                date       l_ipn         r_asn              f  \\\n",
      "count                            847  847.000000  8.470000e+02     847.000000   \n",
      "mean   2006-08-12 17:56:10.484061440    4.637544  2.981269e+05    2306.609209   \n",
      "min              2006-07-01 00:00:00    0.000000  7.768000e+03       4.000000   \n",
      "25%              2006-07-22 00:00:00    2.000000  1.410115e+05      60.000000   \n",
      "50%              2006-08-12 00:00:00    5.000000  2.403990e+05     346.000000   \n",
      "75%              2006-09-03 00:00:00    7.000000  4.130475e+05    1429.500000   \n",
      "max              2006-09-30 00:00:00    9.000000  1.394690e+06  785297.000000   \n",
      "std                              NaN    2.899361  2.196820e+05   28582.894686   \n",
      "\n",
      "             yday        wday  \n",
      "count  847.000000  847.000000  \n",
      "mean   224.747344    3.003542  \n",
      "min    182.000000    0.000000  \n",
      "25%    203.000000    1.000000  \n",
      "50%    224.000000    3.000000  \n",
      "75%    246.000000    5.000000  \n",
      "max    273.000000    6.000000  \n",
      "std     25.748739    2.012076  \n"
     ]
    }
   ],
   "source": [
    "# Summary Statistics of the Dataset\n",
    "print(\"Summary Statistics of the Dataset:\")\n",
    "print(\"=\"*50)\n",
    "summary_statistics = df.describe()\n",
    "print(summary_statistics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4735ecee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.298035Z",
     "iopub.status.busy": "2024-07-21T06:55:10.297668Z",
     "iopub.status.idle": "2024-07-21T06:55:10.305139Z",
     "shell.execute_reply": "2024-07-21T06:55:10.304128Z"
    },
    "papermill": {
     "duration": 0.018887,
     "end_time": "2024-07-21T06:55:10.307556",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.288669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Check for Null Values in the Dataset:\n",
      "==================================================\n",
      "date     0\n",
      "l_ipn    0\n",
      "r_asn    0\n",
      "f        0\n",
      "yday     0\n",
      "wday     0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for Null Values in the Dataset\n",
    "print(\"Check for Null Values in the Dataset:\")\n",
    "print(\"=\"*50)\n",
    "null_values = df.isnull().sum()\n",
    "print(null_values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53defffa",
   "metadata": {
    "papermill": {
     "duration": 0.007583,
     "end_time": "2024-07-21T06:55:10.323251",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.315668",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Data Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5ce1e0f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.342110Z",
     "iopub.status.busy": "2024-07-21T06:55:10.341076Z",
     "iopub.status.idle": "2024-07-21T06:55:10.351444Z",
     "shell.execute_reply": "2024-07-21T06:55:10.350504Z"
    },
    "papermill": {
     "duration": 0.021834,
     "end_time": "2024-07-21T06:55:10.353691",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.331857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Normalize the data\n",
    "def normalize_data(df):\n",
    "    scaler = MinMaxScaler()\n",
    "    df['f'] = scaler.fit_transform(df[['f']])\n",
    "    return df, scaler\n",
    "\n",
    "df, scaler = normalize_data(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6cf8f3a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.371758Z",
     "iopub.status.busy": "2024-07-21T06:55:10.371012Z",
     "iopub.status.idle": "2024-07-21T06:55:10.377962Z",
     "shell.execute_reply": "2024-07-21T06:55:10.376906Z"
    },
    "papermill": {
     "duration": 0.018471,
     "end_time": "2024-07-21T06:55:10.380285",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.361814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create dataset for time series prediction\n",
    "def create_dataset(dataset, look_back=1):\n",
    "    dataX, dataY = [], []\n",
    "    for i in range(len(dataset) - look_back):\n",
    "        a = dataset.iloc[i:(i + look_back), 1:].values\n",
    "        dataX.append(a)\n",
    "        dataY.append(dataset.iloc[i + look_back, 1])\n",
    "    return np.array(dataX), np.array(dataY)\n",
    "\n",
    "look_back = 14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f393b621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.398216Z",
     "iopub.status.busy": "2024-07-21T06:55:10.397562Z",
     "iopub.status.idle": "2024-07-21T06:55:10.406545Z",
     "shell.execute_reply": "2024-07-21T06:55:10.405477Z"
    },
    "papermill": {
     "duration": 0.020502,
     "end_time": "2024-07-21T06:55:10.408796",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.388294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define and train models\n",
    "def build_model(model_type, input_shape):\n",
    "    model = Sequential()\n",
    "    if model_type == 'LSTM':\n",
    "        model.add(LSTM(64, input_shape=input_shape, return_sequences=True))\n",
    "        model.add(LSTM(32))\n",
    "    elif model_type == 'GRU':\n",
    "        model.add(GRU(64, input_shape=input_shape, return_sequences=True))\n",
    "        model.add(GRU(32))\n",
    "    elif model_type == 'CNN':\n",
    "        model.add(Conv1D(64, 3, activation='relu', input_shape=input_shape))\n",
    "        model.add(MaxPooling1D(2))\n",
    "        model.add(Conv1D(32, 3, activation='relu'))\n",
    "        model.add(MaxPooling1D(2))\n",
    "        model.add(Flatten())\n",
    "    model.add(Dense(1))\n",
    "    model.compile(optimizer=Adam(), loss='mean_squared_error')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c903b4c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.427082Z",
     "iopub.status.busy": "2024-07-21T06:55:10.426385Z",
     "iopub.status.idle": "2024-07-21T06:55:10.433235Z",
     "shell.execute_reply": "2024-07-21T06:55:10.432205Z"
    },
    "papermill": {
     "duration": 0.018318,
     "end_time": "2024-07-21T06:55:10.435398",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.417080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(model_type, data):\n",
    "    train = data.copy()\n",
    "    trainX, trainY = create_dataset(train, look_back)\n",
    "    trainX = trainX.reshape((trainX.shape[0], trainX.shape[1], -1))\n",
    "    model = build_model(model_type, (trainX.shape[1], trainX.shape[2]))\n",
    "    model.fit(trainX, trainY, epochs=100, batch_size=16, verbose=0)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3b61304b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.453307Z",
     "iopub.status.busy": "2024-07-21T06:55:10.452459Z",
     "iopub.status.idle": "2024-07-21T06:55:10.459053Z",
     "shell.execute_reply": "2024-07-21T06:55:10.458043Z"
    },
    "papermill": {
     "duration": 0.017809,
     "end_time": "2024-07-21T06:55:10.461151",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.443342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def evaluate_model(model, data, scaler):\n",
    "    dataX, dataY = create_dataset(data, look_back)\n",
    "    dataX = dataX.reshape((dataX.shape[0], dataX.shape[1], -1))\n",
    "    predictions = model.predict(dataX)\n",
    "    predictions = scaler.inverse_transform(predictions)\n",
    "    dataY = scaler.inverse_transform(dataY.reshape(-1, 1))\n",
    "    mse = mean_squared_error(dataY, predictions)\n",
    "    return mse, predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d2583dea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:55:10.478768Z",
     "iopub.status.busy": "2024-07-21T06:55:10.478378Z",
     "iopub.status.idle": "2024-07-21T06:59:26.567912Z",
     "shell.execute_reply": "2024-07-21T06:59:26.566487Z"
    },
    "papermill": {
     "duration": 256.101592,
     "end_time": "2024-07-21T06:59:26.570701",
     "exception": false,
     "start_time": "2024-07-21T06:55:10.469109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train models\n",
    "models = {}\n",
    "model_types = ['LSTM', 'GRU', 'CNN']\n",
    "for model_type in model_types:\n",
    "    models[model_type] = {}\n",
    "    for ipn in range(10):\n",
    "        ip_data = df[df['l_ipn'] == ipn][['f', 'wday']]\n",
    "        models[model_type][ipn] = train_model(model_type, ip_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "def54299",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:59:26.588764Z",
     "iopub.status.busy": "2024-07-21T06:59:26.588357Z",
     "iopub.status.idle": "2024-07-21T06:59:26.607094Z",
     "shell.execute_reply": "2024-07-21T06:59:26.606070Z"
    },
    "papermill": {
     "duration": 0.030526,
     "end_time": "2024-07-21T06:59:26.609340",
     "exception": false,
     "start_time": "2024-07-21T06:59:26.578814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def plot_results(df, models, scaler):\n",
    "    num_servers = 10\n",
    "    fig, axes = plt.subplots(5, 2, figsize=(15, 20))\n",
    "    axes = axes.flatten()  # Flatten the 2D array of axes for easier indexing\n",
    "\n",
    "    for i in range(num_servers):\n",
    "        ax = axes[i]\n",
    "        \n",
    "        # Filter data for the current server\n",
    "        ip_data = df[df['l_ipn'] == i]\n",
    "        \n",
    "        # Inverse transform the 'f' feature and flatten the result\n",
    "        ipf_data = scaler.inverse_transform(ip_data[['f']].values).flatten()\n",
    "        \n",
    "        for model_type, model in models.items():\n",
    "            model_instance = model[i]\n",
    "            mse, predictions = evaluate_model(model_instance, ip_data[['f', 'wday']], scaler)\n",
    "            \n",
    "            # Reshape predictions if necessary\n",
    "            if predictions.ndim == 2 and predictions.shape[1] == 1:\n",
    "                predictions = predictions.flatten()\n",
    "            \n",
    "            # Ensure predictions and ip_data['yday'] have the same length\n",
    "            len_yday = len(ip_data['yday'])\n",
    "            len_predictions = len(predictions)\n",
    "            \n",
    "            if len_predictions != len_yday:\n",
    "                print(f\"Server {i}, Model {model_type}:\")\n",
    "                print(f\"Length of ip_data['yday']: {len_yday}\")\n",
    "                print(f\"Length of predictions: {len_predictions}\")\n",
    "                \n",
    "                # Adjust lengths\n",
    "                min_length = min(len_yday, len_predictions)\n",
    "                ip_data = ip_data.iloc[:min_length]\n",
    "                ipf_data = ipf_data[:min_length]\n",
    "                predictions = predictions[:min_length]\n",
    "            \n",
    "            # Plot actual and predicted values\n",
    "            ax.plot(ip_data['yday'], ipf_data, label=f\"Actual Server {i}\")\n",
    "            ax.plot(ip_data['yday'], predictions, label=f\"{model_type} Predictions\", alpha=0.7)\n",
    "        \n",
    "        # Set plot titles and labels\n",
    "        ax.set_title(f\"Server {i} Load Prediction\")\n",
    "        ax.set_xlabel('Day of Year')\n",
    "        ax.set_ylabel('Load')\n",
    "        ax.legend()\n",
    "    \n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "edba89b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-21T06:59:26.626825Z",
     "iopub.status.busy": "2024-07-21T06:59:26.626479Z",
     "iopub.status.idle": "2024-07-21T06:59:26.670459Z",
     "shell.execute_reply": "2024-07-21T06:59:26.669325Z"
    },
    "papermill": {
     "duration": 0.05529,
     "end_time": "2024-07-21T06:59:26.672685",
     "exception": false,
     "start_time": "2024-07-21T06:59:26.617395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n"
     ]
    }
   ],
   "source": [
    "# Example prediction for a specific day\n",
    "def get_predicted_flow_for_yday(models, yday_value):\n",
    "    predicted_values = []\n",
    "    for model_type in models.keys():\n",
    "        model_predictions = []\n",
    "        for i in range(10):\n",
    "            ip_data = df[df['l_ipn'] == i]\n",
    "            yday_data = ip_data[ip_data['yday'] == yday_value]\n",
    "            if not yday_data.empty:\n",
    "                mse, predictions = evaluate_model(models[model_type][i], yday_data[['f', 'wday']], scaler)\n",
    "                model_predictions.append(predictions[-1])\n",
    "            else:\n",
    "                model_predictions.append(0)\n",
    "        predicted_values.append(model_predictions)\n",
    "    return predicted_values\n",
    "\n",
    "yday_value = 34\n",
    "predicted_flows = get_predicted_flow_for_yday(models, yday_value)\n",
    "print(predicted_flows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a100ccb",
   "metadata": {
    "papermill": {
     "duration": 0.008561,
     "end_time": "2024-07-21T06:59:26.689306",
     "exception": false,
     "start_time": "2024-07-21T06:59:26.680745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2018,
     "sourceId": 3449,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 278.178532,
   "end_time": "2024-07-21T06:59:30.238095",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-21T06:54:52.059563",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
