{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dfa124b5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-17T08:55:10.709204Z",
     "iopub.status.busy": "2024-08-17T08:55:10.708768Z",
     "iopub.status.idle": "2024-08-17T08:55:11.810326Z",
     "shell.execute_reply": "2024-08-17T08:55:11.809129Z"
    },
    "papermill": {
     "duration": 1.11056,
     "end_time": "2024-08-17T08:55:11.814871",
     "exception": false,
     "start_time": "2024-08-17T08:55:10.704311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0117.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0101.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0108.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0110.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0119.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0115.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0116.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0105.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0106.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0121.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0111.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0103.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0120.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0122.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0109.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0112.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0114.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0107.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0118.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Normal/0102.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0117.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0101.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0104.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0108.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0110.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0119.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0115.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0116.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0105.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0106.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0111.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0103.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0120.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0109.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0112.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0113.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0114.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0107.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0118.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Viral Pneumonia/0102.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0108.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0119.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0115.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/auntminnie-2020_01_31_20_24_2322_2020_01_31_x-ray_coronavirus_US.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/COVID-00037.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0106.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0111.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/COVID-00022.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/auntminnie-a-2020_01_28_23_51_6665_2020_01_28_Vietnam_coronavirus.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0120.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/094.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/COVID-00003b.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0105.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/radiopaedia-2019-novel-coronavirus-infected-pneumonia.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/auntminnie-c-2020_01_28_23_51_6665_2020_01_28_Vietnam_coronavirus.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0112.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/COVID-00012.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/COVID-00033.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0113.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0100.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/auntminnie-b-2020_01_28_23_51_6665_2020_01_28_Vietnam_coronavirus.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/098.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/096.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/auntminnie-d-2020_01_28_23_51_6665_2020_01_28_Vietnam_coronavirus.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0118.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/test/Covid/0102.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/071.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/014.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/073.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/05.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/023.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/01.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/096.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/060.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/063.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/059.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/087.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/064.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/011.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/068.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/058.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/020.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/050.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/03.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/02.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/093.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/016.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/010.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/018.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/067.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/088.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/054.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/052.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/084.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/04.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/066.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/079.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/077.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/082.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/056.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/094.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/080.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/057.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/019.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/021.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/074.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/061.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/08.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/069.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/062.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/06.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/013.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/051.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/097.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/024.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/015.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/012.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/081.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/095.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/072.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/092.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/055.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/086.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/053.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/025.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/022.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/017.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/065.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/091.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/076.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/07.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/083.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/075.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/070.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/09.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Normal/085.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/071.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/035.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/032.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/073.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/037.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/05.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/023.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/01.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/096.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/063.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/044.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/064.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/036.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/011.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/068.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/058.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/020.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/03.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/02.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/016.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/010.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/018.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/067.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/054.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/052.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/084.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/04.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/066.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/042.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/077.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/041.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/082.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/056.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/094.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/038.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/057.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/019.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/021.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/027.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/046.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/074.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/061.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/08.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/062.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/045.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/033.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/06.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/013.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/051.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/078.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/024.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/034.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/012.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/081.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/095.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/072.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/055.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/043.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/053.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/025.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/022.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/065.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/076.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/047.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/07.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/083.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/048.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/075.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/031.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Viral Pneumonia/09.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/032.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/01.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00014.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/080.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/060.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/092.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00005.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00031.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/059.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/067.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/044.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00037.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/069.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/089.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/076.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00032.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00027.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/058.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/050.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/03.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/02.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00003a.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/056.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/033.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00016.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00017.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00022.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/09.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/088.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/068.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00034.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/064.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00029.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/015.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00030.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/054.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/086.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/052.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00007.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00025.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/084.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/079.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/042.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00038.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00003b.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/041.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00026.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/057.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/021.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00001.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/027.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/046.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00028.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/039.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/071.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/08.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00009.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/062.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00024.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/045.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00018.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/019.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00015a.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00020.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/06.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/061.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/051.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/073.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/078.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/024.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/020.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/040.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00021.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/012.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00019.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00012.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/081.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00033.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/072.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00011.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/074.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/055.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/026.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/043.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/049.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00023.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00036.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00013a.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/053.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/025.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00035.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/082.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/022.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00006.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/07.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/065.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/047.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00013b.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00010.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00015b.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00004.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/010.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/091.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/090.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/083.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/048.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00008.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/031.jpeg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/04.png\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/COVID-00002.jpg\n",
      "/kaggle/input/covid19-image-dataset/Covid19-dataset/train/Covid/085.jpeg\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9cc890e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T08:55:11.823929Z",
     "iopub.status.busy": "2024-08-17T08:55:11.822658Z",
     "iopub.status.idle": "2024-08-17T09:24:04.724166Z",
     "shell.execute_reply": "2024-08-17T09:24:04.722694Z"
    },
    "papermill": {
     "duration": 1732.908766,
     "end_time": "2024-08-17T09:24:04.726849",
     "exception": false,
     "start_time": "2024-08-17T08:55:11.818083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/resnet50-11ad3fa6.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-11ad3fa6.pth\n",
      "100%|██████████| 97.8M/97.8M [00:00<00:00, 128MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cpu\n",
      "Epoch 1 train loss 0.03650037050247192 acc 0.42 val loss 0.04093039970771939 acc 0.39215686274509803\n",
      "Epoch 2 train loss 0.03143917351961136 acc 0.63 val loss 0.03813613162321203 acc 0.6862745098039216\n",
      "Epoch 3 train loss 0.02832146018743515 acc 0.85 val loss 0.032800596134335384 acc 0.8823529411764706\n",
      "Epoch 4 train loss 0.024621396362781524 acc 0.95 val loss 0.030298388471790387 acc 0.9019607843137255\n",
      "Epoch 5 train loss 0.02214838743209839 acc 0.965 val loss 0.02553324021545111 acc 0.9803921568627451\n",
      "Epoch 6 train loss 0.020790009796619414 acc 0.995 val loss 0.028176130033006855 acc 0.9215686274509803\n",
      "Epoch 7 train loss 0.020139996707439423 acc 1.0 val loss 0.023840785026550293 acc 0.9803921568627451\n",
      "Epoch 8 train loss 0.019649777710437775 acc 1.0 val loss 0.025194619216170965 acc 0.9411764705882353\n",
      "Epoch 9 train loss 0.019596515595912932 acc 1.0 val loss 0.023575372555676627 acc 0.9803921568627451\n",
      "Epoch 10 train loss 0.019502479434013367 acc 1.0 val loss 0.02299818338132372 acc 0.9607843137254902\n",
      "Epoch 11 train loss 0.019744938015937807 acc 1.0 val loss 0.022958466819688387 acc 0.9607843137254902\n",
      "Epoch 12 train loss 0.019562733471393586 acc 1.0 val loss 0.022966443323621563 acc 0.9803921568627451\n",
      "Epoch 13 train loss 0.01945144832134247 acc 1.0 val loss 0.022989163211747713 acc 0.9803921568627451\n",
      "Epoch 14 train loss 0.019971208274364473 acc 1.0 val loss 0.02308515941395479 acc 0.9803921568627451\n",
      "Epoch 15 train loss 0.019697342813014985 acc 1.0 val loss 0.02286818681978712 acc 0.9803921568627451\n",
      "Epoch 16 train loss 0.01947909563779831 acc 1.0 val loss 0.02284180066164802 acc 0.9803921568627451\n",
      "Epoch 17 train loss 0.019729856848716736 acc 1.0 val loss 0.022943298021952312 acc 0.9803921568627451\n",
      "Epoch 18 train loss 0.019540891349315644 acc 1.0 val loss 0.022822214107887418 acc 0.9803921568627451\n",
      "Epoch 19 train loss 0.019675360023975373 acc 1.0 val loss 0.02277237060023289 acc 0.9803921568627451\n",
      "Epoch 20 train loss 0.019472661912441253 acc 1.0 val loss 0.022791102820751714 acc 0.9803921568627451\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        26\n",
      "           1       0.95      1.00      0.98        20\n",
      "           2       1.00      0.95      0.97        20\n",
      "\n",
      "    accuracy                           0.98        66\n",
      "   macro avg       0.98      0.98      0.98        66\n",
      "weighted avg       0.99      0.98      0.98        66\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import warnings\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms\n",
    "from torchvision.models import resnet50, ResNet50_Weights\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "from PIL import Image\n",
    "from copy import deepcopy\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Define the create_df function\n",
    "def create_df(path):\n",
    "    dd = {\"images\": [], \"labels\": []}\n",
    "    \n",
    "    for i in os.listdir(path):\n",
    "        img_dirs = os.path.join(path, i)\n",
    "        for j in os.listdir(img_dirs):\n",
    "            dd[\"images\"].append(os.path.join(img_dirs, j))\n",
    "            dd[\"labels\"].append(i)\n",
    "            \n",
    "    return pd.DataFrame(dd)\n",
    "\n",
    "# Importing data\n",
    "df = create_df(\"/kaggle/input/covid19-image-dataset/Covid19-dataset/train\")\n",
    "test = create_df(\"/kaggle/input/covid19-image-dataset/Covid19-dataset/test\")\n",
    "\n",
    "# Encoding labels and shuffling test set\n",
    "le = LabelEncoder()\n",
    "df[\"labels\"] = le.fit_transform(df[\"labels\"].values)\n",
    "test[\"labels\"] = le.transform(test[\"labels\"].values)\n",
    "test = test.sample(frac=1).reset_index(drop=True)\n",
    "\n",
    "# Hyperparameters\n",
    "EPOCHS = 20\n",
    "LR = 0.1\n",
    "GAMMA = 0.1\n",
    "STEP = 10\n",
    "BATCH = 32\n",
    "IMG_SIZE = 224\n",
    "OUT_SIZE = 3\n",
    "\n",
    "# Splitting data\n",
    "train, val = train_test_split(df.values, random_state=42, test_size=0.2)\n",
    "\n",
    "# Data transformation pipeline\n",
    "class Pipeline(Dataset):\n",
    "    def __init__(self, data, transform):\n",
    "        super(Pipeline, self).__init__()\n",
    "        self.data = data\n",
    "        self.transform = transform\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "    \n",
    "    def __getitem__(self, x):\n",
    "        img, label = self.data[x, 0], self.data[x, 1]\n",
    "        img = Image.open(img).convert(\"RGB\")\n",
    "        img = np.array(img)\n",
    "        img = self.transform(img)\n",
    "        return img, label\n",
    "\n",
    "# Data preprocessing setup\n",
    "transform = transforms.Compose([\n",
    "    transforms.ToPILImage(),\n",
    "    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n",
    "])\n",
    "\n",
    "train_ds = Pipeline(train, transform)\n",
    "val_ds = Pipeline(val, transform)\n",
    "\n",
    "train_dl = DataLoader(train_ds, batch_size=BATCH, shuffle=True)\n",
    "val_dl = DataLoader(val_ds, batch_size=BATCH, shuffle=False)\n",
    "\n",
    "# Define ResNet50\n",
    "resnet = resnet50(weights=ResNet50_Weights.IMAGENET1K_V2)\n",
    "num_ftrs = resnet.fc.in_features\n",
    "resnet.fc = nn.Linear(num_ftrs, OUT_SIZE)\n",
    "\n",
    "# Adding softmax layer to pre-trained ResNet50\n",
    "class COVID_Detector(nn.Module):\n",
    "    def __init__(self, model):\n",
    "        super(COVID_Detector, self).__init__()\n",
    "        self.model = model\n",
    "        \n",
    "    def forward(self, x):\n",
    "        return nn.functional.softmax(self.model(x), dim=1)\n",
    "\n",
    "# Training device\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "print(device)\n",
    "\n",
    "# Training settings\n",
    "model = COVID_Detector(resnet)\n",
    "model = model.to(device)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=LR)\n",
    "scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=STEP, gamma=GAMMA)\n",
    "\n",
    "# Training\n",
    "best_model = deepcopy(model)\n",
    "best_acc = 0\n",
    "\n",
    "train_loss = []\n",
    "train_acc = []\n",
    "val_loss = []\n",
    "val_acc = []\n",
    "\n",
    "for i in range(1, EPOCHS+1):\n",
    "    model.train()\n",
    "    \n",
    "    diff = 0\n",
    "    acc = 0\n",
    "    total = 0\n",
    "    \n",
    "    for data, target in train_dl:\n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        if torch.cuda.is_available():\n",
    "            data, target = data.cuda(), target.cuda()\n",
    "            \n",
    "        out = model(data)\n",
    "        loss = criterion(out, target)\n",
    "        diff += loss.item()\n",
    "        acc += (out.argmax(1) == target).sum().item()\n",
    "        total += out.size(0)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    train_loss.append(diff/total)\n",
    "    train_acc.append(acc/total)\n",
    "    \n",
    "    model.eval()\n",
    "    \n",
    "    diff = 0\n",
    "    acc = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for data, target in val_dl:\n",
    "            if torch.cuda.is_available():\n",
    "                data, target = data.cuda(), target.cuda()\n",
    "            out = model(data)\n",
    "            loss = criterion(out, target)\n",
    "            diff += loss.item()\n",
    "            acc += (out.argmax(1) == target).sum().item()\n",
    "            total += out.size(0)\n",
    "\n",
    "    val_loss.append(diff/total)\n",
    "    val_acc.append(acc/total)\n",
    "    \n",
    "    if best_acc < val_acc[-1]:\n",
    "        best_acc = val_acc[-1]\n",
    "        best_model = deepcopy(model)\n",
    "    \n",
    "    print(f\"Epoch {i} train loss {train_loss[-1]} acc {train_acc[-1]} val loss {val_loss[-1]} acc {val_acc[-1]}\")\n",
    "    \n",
    "    scheduler.step()\n",
    "\n",
    "# Prediction\n",
    "def predict(img_path):\n",
    "    img = Image.open(img_path).convert(\"RGB\")\n",
    "    img = np.array(img)\n",
    "    img = transform(img)\n",
    "    img = img.unsqueeze(0).to(device)\n",
    "    with torch.no_grad():\n",
    "        output = best_model(img)\n",
    "        proba, pred = torch.max(output, 1)\n",
    "    return pred.item(), proba.item()\n",
    "\n",
    "truth = []\n",
    "probas = []\n",
    "preds = []\n",
    "\n",
    "for i in range(test.shape[0]):\n",
    "    pred, proba = predict(test.iloc[i, 0])\n",
    "    truth.append(test.iloc[i, 1])\n",
    "    preds.append(pred)\n",
    "    probas.append(proba * 100)\n",
    "\n",
    "# Evaluation metrics\n",
    "print(classification_report(truth, preds))\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 627146,
     "sourceId": 1117472,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1738.658715,
   "end_time": "2024-08-17T09:24:06.164133",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-17T08:55:07.505418",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
