{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8917906,"sourceType":"datasetVersion","datasetId":5363221}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/usmanshafeeqdit/greengrowth-analyzer?scriptVersionId=187773970\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-11T07:56:01.147368Z","iopub.execute_input":"2024-07-11T07:56:01.147767Z","iopub.status.idle":"2024-07-11T07:56:01.233269Z","shell.execute_reply.started":"2024-07-11T07:56:01.147737Z","shell.execute_reply":"2024-07-11T07:56:01.232002Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Enhancing Plant Growth Analysis and Classification Using Machine Learning\n\n## Background\n\nUnderstanding plant growth patterns is crucial for optimizing agricultural practices, improving crop yields, and ensuring sustainable farming. Traditional methods of monitoring and analyzing plant growth can be labor-intensive and often lack the precision required for making data-driven decisions. The GreenGrowth Analyzer project aims to address this challenge by developing a machine learning-based system that can accurately classify and analyze plant growth data.\n\n## Objective\n\nThe primary objective of the GreenGrowth Analyzer project is to develop a robust machine learning model that can classify and predict plant growth milestones based on various environmental and cultivation factors. This will help farmers, researchers, and gardeners optimize their practices by providing actionable insights into plant growth.\n\n## Data Description\n\nThe dataset for this project includes the following columns:\n\n- **Soil_Type**: The type of soil in which the plant is grown (e.g., sandy, loamy, clay).\n- **Sunlight_Hours**: The number of hours of sunlight the plant receives per day.\n- **Water_Frequency**: The frequency of watering the plant (e.g., daily, weekly).\n- **Fertilizer_Type**: The type of fertilizer used for the plant (e.g., organic, inorganic).\n- **Temperature**: The average temperature of the environment where the plant is grown.\n- **Humidity**: The average humidity level of the environment where the plant is grown.\n- **Growth_Milestone**: The stage of plant growth (e.g., germination, vegetative, flowering, fruiting).\n\n## Scope\n\n### Data Collection and Preprocessing\n\n- Collect a comprehensive dataset covering various plant species and growth conditions.\n- Clean and preprocess the data to handle missing values, outliers, and inconsistencies.\n\n### Feature Engineering\n\n- Engineer relevant features from the existing dataset to enhance model performance.\n- Analyze feature importance to identify key factors influencing plant growth.\n\n### Model Development\n\n- Develop and train multiple machine learning models to classify plant growth milestones.\n- Perform hyperparameter tuning and model selection to achieve the best performance.\n\n### Model Evaluation\n\n- Evaluate the models using appropriate metrics such as accuracy, precision, recall, and F1 score.\n- Validate the models on a separate test dataset to ensure generalizability.\n\n### Visualization and Reporting\n\n- Create intuitive visualizations to present the classification results and insights.\n- Develop a reporting tool to generate detailed reports on plant growth analysis.\n\n### Deployment\n\n- Deploy the final model as a web or mobile application for easy accessibility.\n- Integrate the application with real-time data collection devices if possible.\n\n## Expected Outcomes\n\n- A machine learning model capable of accurately classifying plant growth milestones.\n- Actionable insights and recommendations for optimizing plant growth conditions.\n- An easy-to-use application for farmers, researchers, and gardeners to monitor and analyze plant growth.\n\n## Significance\n\nThe GreenGrowth Analyzer project will significantly contribute to precision agriculture by providing a data-driven approach to plant growth analysis. It will help improve crop yields, reduce resource wastage, and promote sustainable farming practices, ultimately benefiting both small-scale and large-scale agricultural operations.\n","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import Markdown, display\nimport pandas as pd\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, StackingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import classification_report\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.235358Z","iopub.execute_input":"2024-07-11T07:56:01.236096Z","iopub.status.idle":"2024-07-11T07:56:01.244687Z","shell.execute_reply.started":"2024-07-11T07:56:01.23606Z","shell.execute_reply":"2024-07-11T07:56:01.24359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 1 : Load DataSet","metadata":{}},{"cell_type":"markdown","source":"### 1.1 Load dataset","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/plant-growth-data-classification/plant_growth_data.csv\")\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.245851Z","iopub.execute_input":"2024-07-11T07:56:01.246171Z","iopub.status.idle":"2024-07-11T07:56:01.293104Z","shell.execute_reply.started":"2024-07-11T07:56:01.246146Z","shell.execute_reply":"2024-07-11T07:56:01.29207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 2: Basic Information","metadata":{}},{"cell_type":"markdown","source":"### 2.1 Display first few rows of dataset","metadata":{}},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.295543Z","iopub.execute_input":"2024-07-11T07:56:01.296343Z","iopub.status.idle":"2024-07-11T07:56:01.307942Z","shell.execute_reply.started":"2024-07-11T07:56:01.296305Z","shell.execute_reply":"2024-07-11T07:56:01.306879Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.2 Display the last few rows of data set","metadata":{}},{"cell_type":"code","source":"df.tail()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.309188Z","iopub.execute_input":"2024-07-11T07:56:01.309477Z","iopub.status.idle":"2024-07-11T07:56:01.324298Z","shell.execute_reply.started":"2024-07-11T07:56:01.309454Z","shell.execute_reply":"2024-07-11T07:56:01.323285Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.3 Display the random few rows of dataset","metadata":{}},{"cell_type":"code","source":"df.sample()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.325594Z","iopub.execute_input":"2024-07-11T07:56:01.326218Z","iopub.status.idle":"2024-07-11T07:56:01.341895Z","shell.execute_reply.started":"2024-07-11T07:56:01.326094Z","shell.execute_reply":"2024-07-11T07:56:01.340793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.4 Display the size of data in rows and columns","metadata":{}},{"cell_type":"code","source":"print(\"Number of rows in dataset: \",df.shape[0])\nprint(\"Number of columns in dataset:\",df.shape[1])","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.343147Z","iopub.execute_input":"2024-07-11T07:56:01.343521Z","iopub.status.idle":"2024-07-11T07:56:01.351842Z","shell.execute_reply.started":"2024-07-11T07:56:01.343488Z","shell.execute_reply":"2024-07-11T07:56:01.350773Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.5 Display basic information about the dataset","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.35319Z","iopub.execute_input":"2024-07-11T07:56:01.353652Z","iopub.status.idle":"2024-07-11T07:56:01.379681Z","shell.execute_reply.started":"2024-07-11T07:56:01.353601Z","shell.execute_reply":"2024-07-11T07:56:01.378427Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.6 Print the columns used in dataset","metadata":{}},{"cell_type":"code","source":"column_list = df.columns.to_list()\ncolumns_md = \"\\n\".join([f\"- {col}\" for col in column_list])\ndisplay(Markdown(f\"**Columns:**\\n{columns_md}\"))","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.383423Z","iopub.execute_input":"2024-07-11T07:56:01.383805Z","iopub.status.idle":"2024-07-11T07:56:01.391196Z","shell.execute_reply.started":"2024-07-11T07:56:01.383768Z","shell.execute_reply":"2024-07-11T07:56:01.39003Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.7 Summary statistics","metadata":{}},{"cell_type":"code","source":"styled_df = df.describe().style.set_table_styles(\n    [{\n        'selector': 'thead th',\n        'props': [('background-color', '#4CAF50'), ('color', 'white')]\n    }]\n).set_properties(**{\n    'border': '1px solid black',\n    'padding': '10px',\n    'text-align': 'center'\n}).background_gradient(cmap='Blues')\n\nstyled_df\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.392483Z","iopub.execute_input":"2024-07-11T07:56:01.392797Z","iopub.status.idle":"2024-07-11T07:56:01.495794Z","shell.execute_reply.started":"2024-07-11T07:56:01.392772Z","shell.execute_reply":"2024-07-11T07:56:01.494803Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.8 Check for missing values","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.496946Z","iopub.execute_input":"2024-07-11T07:56:01.497357Z","iopub.status.idle":"2024-07-11T07:56:01.505228Z","shell.execute_reply.started":"2024-07-11T07:56:01.497324Z","shell.execute_reply":"2024-07-11T07:56:01.504032Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 3: Data Cleaning","metadata":{}},{"cell_type":"markdown","source":"### 3.1 check missing value in each column","metadata":{}},{"cell_type":"code","source":"# Step 3: Data clean\n# check missing value in each column\n# it seems that there no missing values in any of the  columns\n# as indicated by the count of 0 missing values for each features\n \nmissing_values = df.isnull().sum()\nprint(\"Missing values in each column:\")\nprint(missing_values)\nprint(\"\\nAs we can see, all columns have 0 missing values. and no need to clean data\")","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.506501Z","iopub.execute_input":"2024-07-11T07:56:01.506833Z","iopub.status.idle":"2024-07-11T07:56:01.516564Z","shell.execute_reply.started":"2024-07-11T07:56:01.506801Z","shell.execute_reply":"2024-07-11T07:56:01.515507Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 4: Univariate Analysis","metadata":{}},{"cell_type":"markdown","source":"### 4.1 Histograms for numerical columns","metadata":{}},{"cell_type":"code","source":"df.hist(bins=30,figsize=(15,10))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:01.517832Z","iopub.execute_input":"2024-07-11T07:56:01.51813Z","iopub.status.idle":"2024-07-11T07:56:02.573698Z","shell.execute_reply.started":"2024-07-11T07:56:01.518106Z","shell.execute_reply":"2024-07-11T07:56:02.572597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 4.2 # Box plots for numerical columns","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nsns.boxplot(data=df)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:02.574886Z","iopub.execute_input":"2024-07-11T07:56:02.575173Z","iopub.status.idle":"2024-07-11T07:56:02.866675Z","shell.execute_reply.started":"2024-07-11T07:56:02.575149Z","shell.execute_reply":"2024-07-11T07:56:02.865521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 4.3 Count plots for categorical columns","metadata":{}},{"cell_type":"code","source":"categorical_columns = df.select_dtypes(include=['object']).columns\n\n\nnum_cols = 3\nnum_rows = (len(categorical_columns) + num_cols - 1) // num_cols\n\n\nfig, axes = plt.subplots(num_rows, num_cols, figsize=(15, 5 * num_rows))\n\n\naxes = axes.flatten()\n\n\nfor i, col in enumerate(categorical_columns):\n    sns.countplot(x=col, data=df, ax=axes[i])\n    axes[i].set_title(f'Count plot of {col}')\n\n\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:02.867866Z","iopub.execute_input":"2024-07-11T07:56:02.86816Z","iopub.status.idle":"2024-07-11T07:56:03.476627Z","shell.execute_reply.started":"2024-07-11T07:56:02.868136Z","shell.execute_reply":"2024-07-11T07:56:03.475563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 5: Bivariate Analysis","metadata":{}},{"cell_type":"markdown","source":"### 5.1 Scatter plots for numerical columns","metadata":{}},{"cell_type":"code","source":"sns.pairplot(df)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:03.478089Z","iopub.execute_input":"2024-07-11T07:56:03.478814Z","iopub.status.idle":"2024-07-11T07:56:07.731745Z","shell.execute_reply.started":"2024-07-11T07:56:03.478774Z","shell.execute_reply":"2024-07-11T07:56:07.730593Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 5.2 Correlation heatmap","metadata":{}},{"cell_type":"code","source":"# Convert categorical columns to numerical using one-hot encoding\ndf_encoded = pd.get_dummies(df, columns=['Soil_Type', 'Water_Frequency', 'Fertilizer_Type'])\n\n# Ensure the target column is the last one for better heatmap visualization\ntarget = df_encoded.pop('Growth_Milestone')\ndf_encoded['Growth_Milestone'] = target\n\n# Compute the correlation matrix\ncorr_matrix = df_encoded.corr()\n\n# Set the size of the plot\nplt.figure(figsize=(12, 8))\n\n# Plot the heatmap\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\n\n# Add title to the heatmap\nplt.title('Correlation Heatmap of Plant Growth Data')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:07.733118Z","iopub.execute_input":"2024-07-11T07:56:07.733452Z","iopub.status.idle":"2024-07-11T07:56:08.559738Z","shell.execute_reply.started":"2024-07-11T07:56:07.733425Z","shell.execute_reply":"2024-07-11T07:56:08.558665Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 6: Multivariate Analysis","metadata":{}},{"cell_type":"markdown","source":"### 6.1 Pair plot with hue for a categorical variable","metadata":{}},{"cell_type":"code","source":"df_encoded = pd.get_dummies(df, columns=['Soil_Type', 'Water_Frequency', 'Fertilizer_Type'])\nsns.pairplot(df, hue='Soil_Type')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:08.560914Z","iopub.execute_input":"2024-07-11T07:56:08.561217Z","iopub.status.idle":"2024-07-11T07:56:14.530295Z","shell.execute_reply.started":"2024-07-11T07:56:08.561191Z","shell.execute_reply":"2024-07-11T07:56:14.529305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 6.2 Multivariate heatmap","metadata":{}},{"cell_type":"code","source":"# Convert categorical columns to numerical using one-hot encoding\ndf_encoded = pd.get_dummies(df, columns=['Soil_Type', 'Water_Frequency', 'Fertilizer_Type'])\n\n# Compute the correlation matrix\ncorr_matrix = df_encoded.corr()\n\n# Set the size of the plot\nplt.figure(figsize=(12, 10))\n\n# Plot the heatmap\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n\n# Add title to the heatmap\nplt.title('Multivariate Correlation Heatmap of Plant Growth Data')\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:35.801989Z","iopub.execute_input":"2024-07-11T07:56:35.80294Z","iopub.status.idle":"2024-07-11T07:56:36.636246Z","shell.execute_reply.started":"2024-07-11T07:56:35.802904Z","shell.execute_reply":"2024-07-11T07:56:36.635118Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 7 : Model Implementation","metadata":{}},{"cell_type":"markdown","source":"### 7.1 Define features and target","metadata":{}},{"cell_type":"code","source":"# Define features and target variable\nX = df.drop('Growth_Milestone', axis=1)\ny = df['Growth_Milestone']","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:24.384555Z","iopub.execute_input":"2024-07-11T07:56:24.385515Z","iopub.status.idle":"2024-07-11T07:56:24.390836Z","shell.execute_reply.started":"2024-07-11T07:56:24.385479Z","shell.execute_reply":"2024-07-11T07:56:24.389817Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 7.2 Split the data into training and testing sets","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:56:15.372648Z","iopub.execute_input":"2024-07-11T07:56:15.373166Z","iopub.status.idle":"2024-07-11T07:56:15.387825Z","shell.execute_reply.started":"2024-07-11T07:56:15.373131Z","shell.execute_reply":"2024-07-11T07:56:15.386914Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 7.3 Preprocessing for numerical and categorical data","metadata":{}},{"cell_type":"code","source":"numerical_features = ['Sunlight_Hours', 'Temperature', 'Humidity']\ncategorical_features = ['Soil_Type', 'Water_Frequency', 'Fertilizer_Type']","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:13.863216Z","iopub.execute_input":"2024-07-11T07:57:13.863593Z","iopub.status.idle":"2024-07-11T07:57:13.868527Z","shell.execute_reply.started":"2024-07-11T07:57:13.863563Z","shell.execute_reply":"2024-07-11T07:57:13.867342Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" ### 7.4 Preprocessing pipelines for numerical and categorical features","metadata":{}},{"cell_type":"code","source":"numerical_transformer = StandardScaler()\ncategorical_transformer = OneHotEncoder()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:16.198066Z","iopub.execute_input":"2024-07-11T07:57:16.198454Z","iopub.status.idle":"2024-07-11T07:57:16.203105Z","shell.execute_reply.started":"2024-07-11T07:57:16.198423Z","shell.execute_reply":"2024-07-11T07:57:16.20202Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 7.5 Combine preprocessing steps","metadata":{}},{"cell_type":"code","source":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_features),\n        ('cat', categorical_transformer, categorical_features)\n    ])","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:19.155634Z","iopub.execute_input":"2024-07-11T07:57:19.156458Z","iopub.status.idle":"2024-07-11T07:57:19.161317Z","shell.execute_reply.started":"2024-07-11T07:57:19.156419Z","shell.execute_reply":"2024-07-11T07:57:19.160295Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 7.6 List of Algorithms","metadata":{}},{"cell_type":"code","source":"classifiers = [\n    ('Logistic Regression', LogisticRegression(random_state=42), {'classifier__C': [0.01, 0.1, 1, 10, 100]}),\n    ('K-Nearest Neighbors', KNeighborsClassifier(), {'classifier__n_neighbors': [3, 5, 7, 9]}),\n    ('Support Vector Machine', SVC(random_state=42), {'classifier__C': [0.1, 1, 10], 'classifier__gamma': [1, 0.1, 0.01]}),\n    ('Decision Tree', DecisionTreeClassifier(random_state=42), {'classifier__max_depth': [3, 5, 7, 10]}),\n    ('Random Forest', RandomForestClassifier(random_state=42), {'classifier__n_estimators': [50, 100, 200]}),\n    ('Gradient Boosting', GradientBoostingClassifier(random_state=42), {'classifier__n_estimators': [50, 100, 200]}),\n    ('AdaBoost', AdaBoostClassifier(random_state=42), {'classifier__n_estimators': [50, 100, 200]}),\n    ('Naive Bayes', GaussianNB(), {}),\n    ('Linear Discriminant Analysis', LinearDiscriminantAnalysis(), {}),\n    ('XGBoost', XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss'), {'classifier__n_estimators': [50, 100, 200]})\n]\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:21.988452Z","iopub.execute_input":"2024-07-11T07:57:21.988843Z","iopub.status.idle":"2024-07-11T07:57:21.997291Z","shell.execute_reply.started":"2024-07-11T07:57:21.988811Z","shell.execute_reply":"2024-07-11T07:57:21.996205Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 7.7 Train and evaluate each model","metadata":{}},{"cell_type":"code","source":"for name, classifier, param_grid in classifiers:\n    # Create the model pipeline\n    model = Pipeline(steps=[('preprocessor', preprocessor),\n                            ('classifier', classifier)])","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:26.057076Z","iopub.execute_input":"2024-07-11T07:57:26.057463Z","iopub.status.idle":"2024-07-11T07:57:26.062665Z","shell.execute_reply.started":"2024-07-11T07:57:26.057432Z","shell.execute_reply":"2024-07-11T07:57:26.061651Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"grid_search = GridSearchCV(model, param_grid, cv=5, scoring='accuracy')","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:28.901081Z","iopub.execute_input":"2024-07-11T07:57:28.901471Z","iopub.status.idle":"2024-07-11T07:57:28.909271Z","shell.execute_reply.started":"2024-07-11T07:57:28.901441Z","shell.execute_reply":"2024-07-11T07:57:28.908338Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"grid_search.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:31.495233Z","iopub.execute_input":"2024-07-11T07:57:31.495602Z","iopub.status.idle":"2024-07-11T07:57:32.454859Z","shell.execute_reply.started":"2024-07-11T07:57:31.495575Z","shell.execute_reply":"2024-07-11T07:57:32.453882Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred = grid_search.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:35.49159Z","iopub.execute_input":"2024-07-11T07:57:35.492482Z","iopub.status.idle":"2024-07-11T07:57:35.503989Z","shell.execute_reply.started":"2024-07-11T07:57:35.492447Z","shell.execute_reply":"2024-07-11T07:57:35.502947Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f'{\"-\"*50}')\nprint(f'{\"Model:\":<20} {name}')\nprint(f'{\"Best Parameters:\":<20} {grid_search.best_params_}')\nprint(f'{\"-\"*50}')\nprint(classification_report(y_test, y_pred, target_names=[\"Not Reached\", \"Reached\"]))\nprint(f'{\"-\"*50}\\n')","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:57:38.27872Z","iopub.execute_input":"2024-07-11T07:57:38.279495Z","iopub.status.idle":"2024-07-11T07:57:38.295518Z","shell.execute_reply.started":"2024-07-11T07:57:38.279459Z","shell.execute_reply":"2024-07-11T07:57:38.294347Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"estimators = [\n    ('Logistic Regression', LogisticRegression(random_state=42, C=10)),\n    ('Random Forest', RandomForestClassifier(random_state=42, n_estimators=200)),\n    ('XGBoost', XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss', n_estimators=200))\n]","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:58:19.64367Z","iopub.execute_input":"2024-07-11T07:58:19.644066Z","iopub.status.idle":"2024-07-11T07:58:19.649671Z","shell.execute_reply.started":"2024-07-11T07:58:19.644037Z","shell.execute_reply":"2024-07-11T07:58:19.648553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stacking_classifier = StackingClassifier(estimators=estimators, final_estimator=GradientBoostingClassifier(random_state=42))","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:58:22.313351Z","iopub.execute_input":"2024-07-11T07:58:22.313726Z","iopub.status.idle":"2024-07-11T07:58:22.318491Z","shell.execute_reply.started":"2024-07-11T07:58:22.313698Z","shell.execute_reply":"2024-07-11T07:58:22.317326Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create the stacking pipeline\nstacking_model = Pipeline(steps=[('preprocessor', preprocessor),\n                                 ('classifier', stacking_classifier)])","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:58:24.417953Z","iopub.execute_input":"2024-07-11T07:58:24.418888Z","iopub.status.idle":"2024-07-11T07:58:24.423477Z","shell.execute_reply.started":"2024-07-11T07:58:24.418851Z","shell.execute_reply":"2024-07-11T07:58:24.422327Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the stacking model\nstacking_model.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:58:27.312844Z","iopub.execute_input":"2024-07-11T07:58:27.31321Z","iopub.status.idle":"2024-07-11T07:58:29.942921Z","shell.execute_reply.started":"2024-07-11T07:58:27.313182Z","shell.execute_reply":"2024-07-11T07:58:29.941922Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make predictions with the stacking model\ny_pred = stacking_model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:58:33.844775Z","iopub.execute_input":"2024-07-11T07:58:33.845156Z","iopub.status.idle":"2024-07-11T07:58:33.877541Z","shell.execute_reply.started":"2024-07-11T07:58:33.845127Z","shell.execute_reply":"2024-07-11T07:58:33.87527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the stacking model\nprint(f'{\"-\"*50}')\nprint(f'{\"Model:\":<20} Stacking Classifier')\nprint(f'{\"-\"*50}')\nprint(classification_report(y_test, y_pred, target_names=[\"Not Reached\", \"Reached\"]))\nprint(f'{\"-\"*50}\\n')","metadata":{"execution":{"iopub.status.busy":"2024-07-11T07:58:53.751658Z","iopub.execute_input":"2024-07-11T07:58:53.752782Z","iopub.status.idle":"2024-07-11T07:58:53.76821Z","shell.execute_reply.started":"2024-07-11T07:58:53.752742Z","shell.execute_reply":"2024-07-11T07:58:53.767139Z"},"trusted":true},"execution_count":null,"outputs":[]}]}