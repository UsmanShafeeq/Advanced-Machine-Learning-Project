{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":100708,"sourceType":"datasetVersion","datasetId":53019}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Project Planning and Preparation\n\n1. **Define Objectives**: Clarify the goals of the classification model, including specific performance metrics (e.g., accuracy, precision, recall).\n\n2. **Understand the Dataset**: Familiarize yourself with the datasetâ€™s structure and attributes. Identify key features relevant for classification.\n\n3. **Set Up Environment**: Prepare the necessary tools and libraries (e.g., Python, Pandas, Scikit-learn, TensorFlow) and ensure your environment is ready for data analysis and model building.\n","metadata":{}},{"cell_type":"markdown","source":"# 1. **Define Objectives**\n# Problem Statement \n\nThe objective of this project is to classify IP network traffic based on a dataset containing traffic flows labeled with information from 75 different applications. Accurate classification of network traffic is critical for network management, security monitoring, and optimization. This project aims to develop a model that can categorize network traffic accurately using various features provided in the dataset.\n\n# 2. **Understand the Dataset**:\n## Dataset Explanation\n\nThe dataset comprises detailed records of IP network traffic flows and includes the following attributes:\n\n- **low.ID**: Unique identifier for each traffic flow entry, formatted as a combination of source and destination IP addresses, ports, and protocol.\n- **Source.IP**: IP address of the source device in the network.\n- **Source.Port**: Port number on the source device.\n- **Destination.IP**: IP address of the destination device in the network.\n- **Destination.Port**: Port number on the destination device.\n- **Protocol**: Protocol used for the traffic (e.g., TCP, UDP).\n- **Timestamp**: Date and time when the traffic flow was recorded.\n- **Flow.Duration**: Duration of the traffic flow in milliseconds.\n- **Total.Fwd.Packets**: Total number of forward packets in the flow.\n- **Total.Backward.Packets**: Total number of backward packets in the flow.\n- **Active.Std**: Standard deviation of the active time in the flow.\n- **Active.Max**: Maximum active time in the flow.\n- **Active.Min**: Minimum active time in the flow.\n- **Idle.Mean**: Mean idle time in the flow.\n- **Idle.Std**: Standard deviation of the idle time in the flow.\n- **Idle.Max**: Maximum idle time in the flow.\n- **Idle.Min**: Minimum idle time in the flow.\n- **Label**: Classification label for the traffic flow, indicating whether the flow is benign or malicious.\n- **L7Protocol**: Application-level protocol used (e.g., HTTP, HTTPS).\n- **ProtocolName**: Name of the application protocol associated with the traffic flow.\n\nThe dataset provides comprehensive information for analyzing and classifying network traffic. By leveraging these attributes, the project will focus on building a classification model to differentiate between various types of network traffic based on the 75 application labels provided. This classification can help in improving network security and efficiency by identifying and managing different types of traffic more effectively.\n","metadata":{}},{"cell_type":"markdown","source":"# Classifying IP Network Traffic Based on 75 Applications","metadata":{}},{"cell_type":"markdown","source":"# 3. **Set Up Environment**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nimport joblib","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# =====================================================================","metadata":{}},{"cell_type":"markdown","source":"# Data Exploration and Preprocessing\n\n1. **Load the Dataset**: Import the dataset into a data analysis tool or environment (e.g., Pandas DataFrame in Python).\n\n2. **Basic Information & Inspect Data Quality**: Check for missing values, inconsistencies, and anomalies in the dataset. Handle any issues appropriately (e.g., imputation, removal of outliers).\n\n3. **Feature Engineering**: Create new features if necessary. For instance, extract time-based features from the Timestamp attribute or convert categorical variables into numerical representations using encoding techniques.\n\n4. **Normalize/Standardize Data**: Scale numerical features to a uniform range or distribution to improve model performance.\n","metadata":{}},{"cell_type":"markdown","source":"# 1. **Load the Dataset**:","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/ip-network-traffic-flows-labeled-with-87-apps/Dataset-Unicauca-Version2-87Atts.csv\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 2. **Basic Information & Inspect Data Quality**:","metadata":{}},{"cell_type":"code","source":"# Display first few rows about the dataset\ndf.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display first last rows about the dataset\ndf.tail()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display first samle rows about the dataset\ndf.sample(5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display basic information about the dataset\ndf.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Summary statistics\nprint(df.describe())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check for missing values\nprint(df.isnull().sum())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#  Univariate Analysis","metadata":{}},{"cell_type":"code","source":"# Histograms for numerical columns\ndf.hist(bins=30, figsize=(15, 10))\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Box plots for numerical columns\nplt.figure(figsize=(15, 10))\nsns.boxplot(data=df)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Bivariate Analysis","metadata":{}},{"cell_type":"code","source":"# Scatter plots for numerical columns\nsns.pairplot(df)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Correlation heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Multivariate Analysis","metadata":{}},{"cell_type":"code","source":"# Pair plot with hue for a categorical variable\nsns.pairplot(df, hue='categorical_column')  # Replace 'categorical_column' with the actual column name\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Multivariate heatmap\nplt.figure(figsize=(12, 10))\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3. **Feature Engineering**:","metadata":{}},{"cell_type":"code","source":"# Define feature columns and target variable\nfeatures = ['Source.IP', 'Source.Port', 'Destination.IP', 'Destination.Port', 'Protocol', 'Flow.Duration', 'Total.Fwd.Packets', 'Total.Backward.Packets', 'Active.Std', 'Active.Max', 'Active.Min', 'Idle.Mean', 'Idle.Std', 'Idle.Max', 'Idle.Min']\ntarget = 'Label'\n\nX = data[features]\ny = data[target]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3.3. Encode Categorical Features and Scale Numerical Features","metadata":{}},{"cell_type":"code","source":"# Define preprocessing for numerical and categorical features\nnumeric_features = ['Flow.Duration', 'Total.Fwd.Packets', 'Total.Backward.Packets', 'Active.Std', 'Active.Max', 'Active.Min', 'Idle.Mean', 'Idle.Std', 'Idle.Max', 'Idle.Min']\ncategorical_features = ['Protocol']\n\n# Create preprocessing pipeline\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(), numeric_features),\n        ('cat', OneHotEncoder(), categorical_features)\n    ])\n\n# Apply preprocessing\nX_processed = preprocessor.fit_transform(X)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 4. Split the Data","metadata":{}},{"cell_type":"code","source":"# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, random_state=42)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 5. Train the Model","metadata":{}},{"cell_type":"code","source":"# Initialize and train the RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)\nmodel.fit(X_train, y_train)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 6. Evaluate the Model","metadata":{}},{"cell_type":"code","source":"# Make predictions\ny_pred = model.predict(X_test)\n\n# Print classification report\nprint(classification_report(y_test, y_pred))\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 7. Save and Load the Model","metadata":{}},{"cell_type":"code","source":"# Save the model\njoblib.dump(model, 'network_traffic_classifier.pkl')\n\n# Load the model\nloaded_model = joblib.load('network_traffic_classifier.pkl')\n\n# Predict new data (if available)\n# new_data = preprocessor.transform(new_data)\n# predictions = loaded_model.predict(new_data)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from kafka import KafkaConsumer\n\n# Real-time data consumption (example setup)\nconsumer = KafkaConsumer('traffic_topic', bootstrap_servers='localhost:9092')\n\nfor message in consumer:\n    # Process message\n    new_data = preprocess_message(message)  # Implement preprocessing for real-time data\n    prediction = loaded_model.predict(new_data)\n    print(f\"Prediction: {prediction}\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}